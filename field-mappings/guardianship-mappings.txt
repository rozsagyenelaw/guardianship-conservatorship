// GC-210 Form Filler Function
async function fillGC210(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-210 has ${form.getFields().length} fields available`);
    
    // PAGE 1 HEADER - Attorney Information
    const attorneyFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyName_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyBarNo_dc[0]': data.attorney.bar_number,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFirm_ft[0]': data.attorney.firm_name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyStreet_ft[0]': data.attorney.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyCity_ft[0]': data.attorney.city,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyState_ft[0]': data.attorney.state,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyZip_ft[0]': data.attorney.zip,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Phone_ft[0]': data.attorney.phone,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Fax_ft[0]': data.attorney.fax,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Email_ft[0]': data.attorney.email,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFor_ft[0]': `Petitioner ${data.petitioner.name}`,
    };
    
    // Court Information
    const courtFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CrtCounty_ft[0]': data.court.county,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Street_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].MailingAdd_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Branch_ft[0]': data.court.branch,
    };
    
    // Case Information
    const caseFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || 'To be assigned',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].TitlePartyName[0].Party2_ft[0]': data.minor.name, // Primary minor's name
    };
    
    // Hearing Information
    const hearingFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].HearingInfo_sf[0].HearingDateTime_ft[0]': data.hearing.datetime,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].HearingInfo_sf[0].Dept_ft[0]': data.hearing.dept,
    };
    
    // Petitioner Information (Section 1a)
    const petitionerFields = {
      'topmostSubform[0].Page1[0].FillText5[0]': data.petitioner.name,
      'topmostSubform[0].Page1[0].FillText6[0]': data.petitioner.address,
      'topmostSubform[0].Page1[0].FillTxt6[0]': data.petitioner.phone,
    };
    
    // Guardian Information (if different from petitioner - Section 1b)
    const guardianFields = {
      'topmostSubform[0].Page1[0].FillText5[1]': data.guardian.name || '',
      'topmostSubform[0].Page1[0].FillText6[1]': data.guardian.address || '',
      'topmostSubform[0].Page1[0].FillTxt6[1]': data.guardian.phone || '',
    };
    
    // Minor Information (Section 2 - up to 4 minors)
    const minorFields = {};
    if (data.minors && data.minors.length > 0) {
      for (let i = 0; i < Math.min(data.minors.length, 4); i++) {
        const minor = data.minors[i];
        minorFields[`topmostSubform[0].Page1[0].FillText11[${i}]`] = minor.name || '';
        minorFields[`topmostSubform[0].Page1[0].FillText71[${i}]`] = minor.birthdate || '';
      }
    }
    
    // Bond Information (Section 1c/1d)
    const bondFields = {
      'topmostSubform[0].Page1[0].FillText9[0]': data.bond.amount || '',
      'topmostSubform[0].Page1[0].FillText10[0]': data.bond.blocked_account || '',
    };
    
    // Estate Values (Page 2, Section 8)
    const estateFields = {
      'topmostSubform[0].Page2[0].FillText78[0]': data.estate.personal_property || '',
      'topmostSubform[0].Page2[0].FillText79[0]': data.estate.real_property || '',
      'topmostSubform[0].Page2[0].FillText78[1]': data.estate.total || '',
    };
    
    // Signatures (Page 3)
    const signatureFields = {
      'topmostSubform[0].Page3[0].FillText17[0]': data.petitioner.name,
      'topmostSubform[0].Page3[0].FillText25[0]': formatDate(new Date()),
      'topmostSubform[0].Page3[0].FillText17[1]': data.attorney.name,
      'topmostSubform[0].Page3[0].FillText25[1]': formatDate(new Date()),
    };
    
    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtFields,
      ...caseFields,
      ...hearingFields,
      ...petitionerFields,
      ...guardianFields,
      ...minorFields,
      ...bondFields,
      ...estateFields,
      ...signatureFields
    };
    
    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }
    
    // CHECKBOXES
    const checkboxes = {
      // Type of Guardianship
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].ChckBx22[0]': data.guardianship_type === 'person',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].ChckBx22[1]': data.guardianship_type === 'estate',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBox22[0]': data.minors.length === 1,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBx22[0]': data.minors.length > 1,
      
      // Bond requirements
      'topmostSubform[0].Page1[0].CheckBox9[0]': !data.bond.required,
      'topmostSubform[0].Page1[0].CheckBox11[0]': !data.bond.required && data.guardianship_type === 'person',
      'topmostSubform[0].Page1[0].CheckBox7[0]': data.bond.required,
      
      // Other petition requests
      'topmostSubform[0].Page1[0].CheckBox5[0]': data.independent_powers || false,
      'topmostSubform[0].Page1[0].CheckBox3[0]': data.dispense_notice || false,
      
      // Petitioner relationship (Page 2)
      'topmostSubform[0].Page2[0].CheckBox40[0]': data.petitioner.is_related || false,
      
      // Required forms attached (Page 3)
      'topmostSubform[0].Page3[0].CheckBox44[0]': true, // UCCJEA Declaration
      'topmostSubform[0].Page3[0].CheckBox43[0]': true, // Consent of Proposed Guardian
      'topmostSubform[0].Page3[0].CheckBox18[0]': true, // Confidential Screening Form
    };
    
    // Set all checkboxes
    for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
      try {
        const checkbox = form.getCheckBox(fieldName);
        if (shouldCheck) {
          checkbox.check();
        } else {
          checkbox.uncheck();
        }
        console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
      } catch (e) {
        console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
      }
    }
    
    return await pdfDoc.save();
  } catch (error) {
    console.error('Error filling GC-210:', error);
    throw error;
  }
}
async function fillGC212(data) {
  try {
    // Load the unlocked GC-212 PDF
    const existingPdfBytes = await window.fs.readFile('GC-212-unlocked.pdf');
    const pdfDoc = await PDFLib.PDFDocument.load(existingPdfBytes);
    const form = pdfDoc.getForm();

    // Court Information
    // SUPERIOR COURT OF CALIFORNIA, COUNTY OF
    if (data.courtInfo?.county) {
      const countyField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtCounty[0]');
      countyField.setText(data.courtInfo.county.toUpperCase());
    }
    
    // STREET ADDRESS:
    if (data.courtInfo?.address) {
      const streetField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtStreet[0]');
      streetField.setText(data.courtInfo.address);
    }
    
    // MAILING ADDRESS:
    if (data.courtInfo?.mailingAddress) {
      const mailingField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtMailingAdd[0]');
      mailingField.setText(data.courtInfo.mailingAddress);
    }
    
    // BRANCH NAME:
    if (data.courtInfo?.branch) {
      const branchField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtBranch[0]');
      branchField.setText(data.courtInfo.branch);
    }
    
    // CITY AND ZIP CODE:
    if (data.courtInfo?.cityZip) {
      const cityZipField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtCityZip[0]');
      cityZipField.setText(data.courtInfo.cityZip);
    }

    // Minor/Ward Name - (Name): (on both pages)
    if (data.minor?.name) {
      const minorNameField1 = form.getTextField('GC-212[0].Page1[0].P1Caption[0].FormTitle[0].Guadianship[0]');
      minorNameField1.setText(data.minor.name.toUpperCase());
      
      // GUARDIANSHIP OF (Name): on page 2
      const minorNameField2 = form.getTextField('GC-212[0].Page2[0].PxCaption[0].TitlePartyName[0].Guadianship[0]');
      minorNameField2.setText(data.minor.name.toUpperCase());
    }

    // CASE NUMBER: (on both pages)
    if (data.caseNumber) {
      const caseNumberField1 = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CaseNumber[0].CaseNumber[0]');
      caseNumberField1.setText(data.caseNumber);
      
      // CASE NUMBER: on page 2
      const caseNumberField2 = form.getTextField('GC-212[0].Page2[0].PxCaption[0].CaseNumber[0].CaseNumber[0]');
      caseNumberField2.setText(data.caseNumber);
    }

    // Attorney Information
    // ATTORNEY OR PARTY WITHOUT ATTORNEY (Name, State Bar number, and address):
    if (data.attorney?.fullInfo) {
      const attyInfoField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].TextField1[0]');
      attyInfoField.setText(data.attorney.fullInfo);
    }
    
    // Phone number
    if (data.attorney?.phone) {
      const phoneField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].Phone[0]');
      phoneField.setText(data.attorney.phone);
    }
    
    // Fax number
    if (data.attorney?.fax) {
      const faxField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].Fax[0]');
      faxField.setText(data.attorney.fax);
    }
    
    // E-MAIL ADDRESS (Optional):
    if (data.attorney?.email) {
      const emailField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].Email[0]');
      emailField.setText(data.attorney.email);
    }
    
    // ATTORNEY FOR (Name):
    if (data.attorney?.representing) {
      const attyForField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].Attorneyname[0]');
      attyForField.setText(data.attorney.representing);
    }

    // Hearing Information
    // HEARING DATE AND TIME:
    if (data.hearing?.dateTime) {
      const hearingField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CaseNumber2[0].HearingdateandTime[0]');
      hearingField.setText(data.hearing.dateTime);
    }
    
    // DEPT.:
    if (data.hearing?.department) {
      const deptField = form.getTextField('GC-212[0].Page1[0].P1Caption[0].CaseNumber2[0].TextField[0]');
      deptField.setText(data.hearing.department);
    }

    // Guardianship Type
    if (data.guardianshipType) {
      if (data.guardianshipType === 'person') {
        // Person
        const personBox = form.getCheckBox('GC-212[0].Page1[0].P1Caption[0].FormTitle2[0].#area[0].CheckBoxCaption[0]');
        personBox.check();
      } else if (data.guardianshipType === 'estate') {
        // Estate
        const estateBox = form.getCheckBox('GC-212[0].Page1[0].P1Caption[0].FormTitle2[0].#area[1].CheckBoxCaption[1]');
        estateBox.check();
      }
    }

    // Guardian Information
    // Proposed guardian (name):
    if (data.guardian?.name) {
      const guardianNameField = form.getTextField('GC-212[0].Page1[0].TextField[0]');
      guardianNameField.setText(data.guardian.name.toUpperCase());
    }
    
    // Hearing date
    if (data.hearing?.date) {
      const hearingDateField = form.getTextField('GC-212[0].Page1[0].HearingDate[0]');
      hearingDateField.setText(data.hearing.date);
    }
    
    // Social security number:
    if (data.guardian?.ssn) {
      const ssnField = form.getTextField('GC-212[0].Page1[0].TextField[1]');
      ssnField.setText(data.guardian.ssn);
    }
    
    // Driver's license number:
    if (data.guardian?.driverLicense) {
      const dlField = form.getTextField('GC-212[0].Page1[0].TextField[2]');
      dlField.setText(data.guardian.driverLicense);
    }
    
    // State:
    if (data.guardian?.state) {
      const stateField = form.getTextField('GC-212[0].Page1[0].TextField[3]');
      stateField.setText(data.guardian.state);
    }
    
    // Home:
    if (data.guardian?.homePhone) {
      const homeField = form.getTextField('GC-212[0].Page1[0].TextField[4]');
      homeField.setText(data.guardian.homePhone);
    }
    
    // Work:
    if (data.guardian?.workPhone) {
      const workField = form.getTextField('GC-212[0].Page1[0].TextField[5]');
      workField.setText(data.guardian.workPhone);
    }
    
    // Other:
    if (data.guardian?.otherPhone) {
      const otherField = form.getTextField('GC-212[0].Page1[0].TextField[6]');
      otherField.setText(data.guardian.otherPhone);
    }

    // Screening Questions (Page 1)
    
    // Question 1: Related to minor
    if (data.screening?.relatedToMinor !== undefined) {
      if (data.screening.relatedToMinor) {
        // I am
        const relatedYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[0].CheckBoxCaption1[0]');
        relatedYesBox.check();
      } else {
        // I am not
        const relatedNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[0].CheckBoxCaption1[1]');
        relatedNoBox.check();
      }
    }
    
    // Question 2: Been convicted of a felony
    if (data.screening?.convictedFelony !== undefined) {
      if (data.screening.convictedFelony) {
        // I have
        const felonyYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[1].CheckBoxCaption2[0]');
        felonyYesBox.check();
      } else {
        // I have not
        const felonyNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[1].CheckBoxCaption2[1]');
        felonyNoBox.check();
      }
    }
    
    // (Check here if you have been arrested for drug or alcohol-related offenses.)
    if (data.screening?.arrestedDrugAlcohol) {
      const drugAlcoholBox = form.getCheckBox('GC-212[0].Page1[0].#area[2].CheckB12[0]');
      drugAlcoholBox.check();
    }
    
    // Question 3: Been convicted of a misdemeanor involving violence
    if (data.screening?.convictedMisdemeanorViolence !== undefined) {
      if (data.screening.convictedMisdemeanorViolence) {
        // I have
        const misdemeanorYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[3].CheckBoxCaption3[0]');
        misdemeanorYesBox.check();
      } else {
        // I have not
        const misdemeanorNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[3].CheckBoxCaption3[1]');
        misdemeanorNoBox.check();
      }
    }
    
    // Question 4: Subject of domestic violence restraining order
    if (data.screening?.domesticViolenceRestraining !== undefined) {
      if (data.screening.domesticViolenceRestraining) {
        // I am
        const restrainingYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[4].CheckBoxCaption4[0]');
        restrainingYesBox.check();
      } else {
        // I am not
        const restrainingNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[4].CheckBoxCaption4[1]');
        restrainingNoBox.check();
      }
    }
    
    // Question 5: Been found by court to have abused or neglected child
    if (data.screening?.courtFoundAbusedChild !== undefined) {
      if (data.screening.courtFoundAbusedChild) {
        // Yes
        const abusedYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[5].CheckBoxCaption5[0]');
        abusedYesBox.check();
      } else {
        // No
        const abusedNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[5].CheckBoxCaption5[1]');
        abusedNoBox.check();
      }
    }
    
    // Question 6: Been found by court to have abused or neglected dependent adult
    if (data.screening?.courtFoundAbusedAdult !== undefined) {
      if (data.screening.courtFoundAbusedAdult) {
        // Yes
        const abusedAdultYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[6].CheckBoxCaption6[0]');
        abusedAdultYesBox.check();
      } else {
        // No
        const abusedAdultNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[6].CheckBoxCaption6[1]');
        abusedAdultNoBox.check();
      }
    }
    
    // Question 7: Under conservatorship
    if (data.screening?.underConservatorship !== undefined) {
      if (data.screening.underConservatorship) {
        // I am
        const conservatorshipYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[7].CheckBoxCaption7[0]');
        conservatorshipYesBox.check();
      } else {
        // I am not
        const conservatorshipNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[7].CheckBoxCaption7[1]');
        conservatorshipNoBox.check();
      }
    }
    
    // Question 8: Unable to properly care for person/property
    if (data.screening?.unableToProvideCare !== undefined) {
      if (data.screening.unableToProvideCare) {
        // Yes
        const unableCareYesBox = form.getCheckBox('GC-212[0].Page1[0].#area[8].CheckBoxCaption8[0]');
        unableCareYesBox.check();
      } else {
        // No
        const unableCareNoBox = form.getCheckBox('GC-212[0].Page1[0].#area[8].CheckBoxCaption8[1]');
        unableCareNoBox.check();
      }
    }

    // Screening Questions (Page 2)
    
    // Question 9: Name appears on statewide central index
    if (data.screening?.centralIndex !== undefined) {
      if (data.screening.centralIndex) {
        // Yes
        const centralIndexYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[0].CheckBoxCaption9[0]');
        centralIndexYesBox.check();
      } else {
        // No
        const centralIndexNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[0].CheckBoxCaption9[1]');
        centralIndexNoBox.check();
      }
    }
    
    // Question 10: Name appears on health and safety code central index
    if (data.screening?.healthSafetyCentralIndex !== undefined) {
      if (data.screening.healthSafetyCentralIndex) {
        // Yes
        const hsIndexYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[1].CheckBoxCaption10[0]');
        hsIndexYesBox.check();
      } else {
        // No
        const hsIndexNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[1].CheckBoxCaption10[1]');
        hsIndexNoBox.check();
      }
    }
    
    // Question 11: Denied license to care for children
    if (data.screening?.deniedLicenseCareChildren !== undefined) {
      if (data.screening.deniedLicenseCareChildren) {
        // Yes
        const deniedLicenseYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[2].CheckBoxCaption11[0]');
        deniedLicenseYesBox.check();
      } else {
        // No
        const deniedLicenseNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[2].CheckBoxCaption11[1]');
        deniedLicenseNoBox.check();
      }
    }
    
    // Question 12: Financial conflict of interest
    if (data.screening?.financialConflict !== undefined) {
      if (data.screening.financialConflict) {
        // I have or may have
        const conflictYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[3].CheckBoxCaption12[0]');
        conflictYesBox.check();
      } else {
        // I do not have
        const conflictNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[3].CheckBoxCaption12[1]');
        conflictNoBox.check();
      }
    }
    
    // Question 13: Been a guardian, conservator, or trustee
    if (data.screening?.beenGuardianConservatorTrustee !== undefined) {
      if (data.screening.beenGuardianConservatorTrustee) {
        // I have
        const beenGuardianYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[4].CheckBoxCaption13[0]');
        beenGuardianYesBox.check();
      } else {
        // I have not
        const beenGuardianNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[4].CheckBoxCaption13[1]');
        beenGuardianNoBox.check();
      }
    }
    
    // Question 14: Been removed as guardian, conservator, or trustee
    if (data.screening?.beenRemovedAsGuardian !== undefined) {
      if (data.screening.beenRemovedAsGuardian) {
        // I have
        const removedYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[5].CheckBoxCaption14[0]');
        removedYesBox.check();
      } else {
        // I have not
        const removedNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[5].CheckBoxCaption14[1]');
        removedNoBox.check();
      }
    }
    
    // Question 15: Professional fiduciary
    if (data.screening?.professionalFiduciary !== undefined) {
      if (data.screening.professionalFiduciary) {
        // I am
        const professionalYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[6].CheckBoxCaption15[0]');
        professionalYesBox.check();
      } else {
        // I am not
        const professionalNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[6].CheckBoxCaption15[1]');
        professionalNoBox.check();
      }
    }
    
    // Question 16: Public entity
    if (data.screening?.publicEntity !== undefined) {
      if (data.screening.publicEntity) {
        // I am
        const publicEntityYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[7].CheckBoxCaption16[0]');
        publicEntityYesBox.check();
      } else {
        // I am not
        const publicEntityNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[7].CheckBoxCaption16[1]');
        publicEntityNoBox.check();
      }
    }
    
    // Question 17: Private professional guardian
    if (data.screening?.privateGuardian !== undefined) {
      if (data.screening.privateGuardian) {
        // I am
        const privateGuardianYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[8].CheckBoxCaption17[0]');
        privateGuardianYesBox.check();
      } else {
        // I am not
        const privateGuardianNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[8].CheckBoxCaption17[1]');
        privateGuardianNoBox.check();
      }
    }
    
    // a responsible corporate officer authorized to act for (name of corporation):
    if (data.guardian?.corporationName) {
      const corporationField = form.getTextField('GC-212[0].Page2[0].TextField[0]');
      corporationField.setText(data.guardian.corporationName);
    }
    
    // Question 18: Minor lives with you
    if (data.screening?.minorLivesWithYou !== undefined) {
      if (data.screening.minorLivesWithYou) {
        // I have
        const minorLivesYesBox = form.getCheckBox('GC-212[0].Page2[0].#area[9].CheckBoxCaption18[0]');
        minorLivesYesBox.check();
      } else {
        // I have not
        const minorLivesNoBox = form.getCheckBox('GC-212[0].Page2[0].#area[9].CheckBoxCaption18[1]');
        minorLivesNoBox.check();
      }
    }

    // Minor Information (up to 3 minors)
    const minorFields = [
      {
        name: 'GC-212[0].Page2[0].TextField[1]',
        homePhone: 'GC-212[0].Page2[0].TextField[2]',
        school: 'GC-212[0].Page2[0].TextField[3]',
        schoolPhone: 'GC-212[0].Page2[0].TextField[4]',
        otherPhone: 'GC-212[0].Page2[0].TextField[5]'
      },
      {
        name: 'GC-212[0].Page2[0].TextField[6]',
        homePhone: 'GC-212[0].Page2[0].TextField[7]',
        school: 'GC-212[0].Page2[0].TextField[8]',
        schoolPhone: 'GC-212[0].Page2[0].TextField[9]',
        otherPhone: 'GC-212[0].Page2[0].TextField[10]'
      },
      {
        name: 'GC-212[0].Page2[0].TextField[11]',
        homePhone: 'GC-212[0].Page2[0].TextField[12]',
        school: 'GC-212[0].Page2[0].TextField[13]',
        schoolPhone: 'GC-212[0].Page2[0].TextField[14]',
        otherPhone: 'GC-212[0].Page2[0].TextField[15]'
      }
    ];

    // Fill minor information for up to 3 minors
    if (data.minors && Array.isArray(data.minors)) {
      for (let i = 0; i < Math.min(data.minors.length, 3); i++) {
        const minor = data.minors[i];
        const fieldSet = minorFields[i];
        
        // Minor's name:
        if (minor.name) {
          const nameField = form.getTextField(fieldSet.name);
          nameField.setText(minor.name.toUpperCase());
        }
        
        // Home telephone:
        if (minor.homePhone) {
          const homePhoneField = form.getTextField(fieldSet.homePhone);
          homePhoneField.setText(minor.homePhone);
        }
        
        // School (name):
        if (minor.school) {
          const schoolField = form.getTextField(fieldSet.school);
          schoolField.setText(minor.school);
        }
        
        // School telephone:
        if (minor.schoolPhone) {
          const schoolPhoneField = form.getTextField(fieldSet.schoolPhone);
          schoolPhoneField.setText(minor.schoolPhone);
        }
        
        // Other telephone:
        if (minor.otherPhone) {
          const otherPhoneField = form.getTextField(fieldSet.otherPhone);
          otherPhoneField.setText(minor.otherPhone);
        }
      }
    }

    // Information on additional minors is attached.
    if (data.additionalMinorsAttached) {
      const additionalMinorsBox = form.getCheckBox('GC-212[0].Page2[0].CheckBo[0]');
      additionalMinorsBox.check();
    }

    // Declaration Section
    // Date:
    if (data.declaration?.date) {
      const dateField = form.getTextField('GC-212[0].Page2[0].#area[10].Date[0]');
      dateField.setText(data.declaration.date);
    }
    
    // (TYPE OR PRINT NAME OF PROPOSED GUARDIAN)
    if (data.guardian?.name) {
      const printNameField = form.getTextField('GC-212[0].Page2[0].#area[10].PrintName[0]');
      printNameField.setText(data.guardian.name.toUpperCase());
    }

    console.log('GC-212 form filled successfully with', Object.keys(data).length, 'data sections');
    return await pdfDoc.save();
    
  } catch (error) {
    console.error('Error filling GC-212:', error);
    throw error;
  }
}

// Example usage data structure:
const exampleGC212Data = {
  courtInfo: {
    county: "LOS ANGELES",
    address: "111 North Hill Street",
    mailingAddress: "Same as above",
    branch: "STANLEY MOSK COURTHOUSE",
    cityZip: "Los Angeles, CA 90012"
  },
  minor: {
    name: "JANE MINOR DOE"
  },
  caseNumber: "24STPB00123",
  attorney: {
    fullInfo: "JANE ATTORNEY SMITH\nState Bar No. 123456\n123 Legal Street\nLos Angeles, CA 90028",
    phone: "(213) 555-0123",
    fax: "(213) 555-0124",
    email: "jsmith@lawfirm.com",
    representing: "Petitioner"
  },
  hearing: {
    dateTime: "October 15, 2025 at 8:30 a.m.",
    date: "10/15/2025",
    department: "11"
  },
  guardianshipType: "person", // or "estate"
  guardian: {
    name: "JOHN GUARDIAN DOE",
    ssn: "XXX-XX-1234",
    driverLicense: "D1234567",
    state: "CA",
    homePhone: "(213) 555-1111",
    workPhone: "(213) 555-2222",
    otherPhone: "(213) 555-3333",
    corporationName: "" // Only if corporate guardian
  },
  screening: {
    relatedToMinor: true, // I am/am not related to the minor
    convictedFelony: false, // I have/have not been convicted of a felony
    arrestedDrugAlcohol: false, // Arrested for drug or alcohol-related offenses
    convictedMisdemeanorViolence: false, // Convicted of misdemeanor involving violence
    domesticViolenceRestraining: false, // Subject of domestic violence restraining order
    courtFoundAbusedChild: false, // Found by court to have abused/neglected child
    courtFoundAbusedAdult: false, // Found by court to have abused/neglected dependent adult
    underConservatorship: false, // Under conservatorship
    unableToProvideCare: false, // Unable to properly care for person/property
    centralIndex: false, // Name appears on statewide central index
    healthSafetyCentralIndex: false, // Name appears on health and safety code central index
    deniedLicenseCareChildren: false, // Denied license to care for children
    financialConflict: false, // Financial conflict of interest
    beenGuardianConservatorTrustee: false, // Been a guardian, conservator, or trustee
    beenRemovedAsGuardian: false, // Been removed as guardian, conservator, or trustee
    professionalFiduciary: false, // Professional fiduciary
    publicEntity: false, // Public entity
    privateGuardian: false, // Private professional guardian
    minorLivesWithYou: true // Minor lives with you
  },
  minors: [
    {
      name: "JANE MINOR DOE",
      homePhone: "(213) 555-4444",
      school: "Lincoln Elementary School",
      schoolPhone: "(213) 555-5555",
      otherPhone: ""
    }
    // Can include up to 3 minors
  ],
  additionalMinorsAttached: false,
  declaration: {
    date: "09/04/2025"
  }
};

/* 
GC-212 FIELD MAPPING SUMMARY (86 total fields):

COURT INFORMATION:
- County: GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtCounty[0]
- Street: GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtStreet[0]
- Mailing: GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtMailingAdd[0]
- Branch: GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtBranch[0]
- City/ZIP: GC-212[0].Page1[0].P1Caption[0].CourtInfo[0].CrtCityZip[0]

CASE INFORMATION:
- Minor Name: GC-212[0].Page1[0].P1Caption[0].FormTitle[0].Guadianship[0]
- Case Number: GC-212[0].Page1[0].P1Caption[0].CaseNumber[0].CaseNumber[0]
- Guardianship Type: Person/Estate checkboxes

ATTORNEY INFORMATION:
- Full Attorney Info: GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].TextField1[0]
- Phone/Fax/Email: Contact fields
- Attorney For: GC-212[0].Page1[0].P1Caption[0].AttyPartyInfo[0].Attorneyname[0]

GUARDIAN INFORMATION:
- Name, SSN, Driver's License, Contact Information
- Multiple phone fields (Home, Work, Other)

SCREENING QUESTIONS:
- 18 Yes/No questions covering criminal history, abuse findings, professional status
- Questions about relationship to minor, convictions, restraining orders, etc.
- Professional fiduciary and corporate guardian questions

MINOR INFORMATION:
- Up to 3 minors with name, phones, school information
- Checkbox for additional minors attachment

DECLARATION:
- Date and guardian signature name

This form is used to screen proposed guardians to ensure they meet legal requirements
and have no disqualifying criminal history or other issues that would make them
unsuitable to serve as guardian of a minor.
*/
// GC-240 Form Filler Function (Order Appointing Guardian of Minor)
async function fillGC240(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-240 has ${form.getFields().length} fields available`);
    
    // Attorney Information
    const attorneyFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyName_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyBarNo_dc[0]': data.attorney.bar_number,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyFirm_ft[0]': data.attorney.firm_name,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyStreet_ft[0]': data.attorney.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyCity_ft[0]': data.attorney.city,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyState_ft[0]': data.attorney.state,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyZip_ft[0]': data.attorney.zip,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Phone_ft[0]': data.attorney.phone,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Fax_ft[0]': data.attorney.fax,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Email_ft[0]': data.attorney.email,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyFor_ft[0]': `Petitioner ${data.petitioner.name}`,
    };
    
    // Court Information
    const courtFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].CrtCounty_ft[0]': data.court.county,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].Street_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].MailingAdd_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].CityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].Branch_ft[0]': data.court.branch,
    };
    
    // Case Information (appears on all pages)
    const caseFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CaseNameGdnship[0].NameofWard_ft[0]': data.minor.name,
      'topmostSubform[0].Page2[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page2[0].CaseNameGdnship[0].NameofWard_ft[0]': data.minor.name,
      'topmostSubform[0].Page3[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page3[0].CaseNameGdnship[0].NameofWard_ft[0]': data.minor.name,
    };
    
    // Hearing Information (Page 1)
    const hearingFields = {
      'topmostSubform[0].Page1[0].JudgeName_ft[0]': data.hearing.judge || '',
      'topmostSubform[0].Page1[0].Hearingdate_ft[0]': data.hearing.date,
      'topmostSubform[0].Page1[0].HearingTime_ft[0]': data.hearing.time,
      'topmostSubform[0].Page1[0].HearingDept_ft[0]': data.hearing.dept,
      'topmostSubform[0].Page1[0].HearingRoom_ft[0]': data.hearing.room || '',
    };
    
    // Appearances (Page 1)
    const appearanceFields = {
      'topmostSubform[0].Page1[0].PetName1c_ft[0]': data.petitioner.name,
      'topmostSubform[0].Page1[0].PetLawName1d_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].NATPetAtty_ft[0]': data.minor.attorney_info || '',
    };
    
    // Guardian Appointment (Page 2)
    const appointmentFields = {
      // Guardian of Person
      'topmostSubform[0].Page2[0].Name8a_ft[0]': data.guardian.name || data.petitioner.name,
      'topmostSubform[0].Page2[0].Address8a_ft[0]': data.guardian.address || data.petitioner.address,
      'topmostSubform[0].Page2[0].Telephone8a_ft[0]': data.guardian.phone || data.petitioner.phone,
      'topmostSubform[0].Page2[0].NameWard8a_ft[0]': data.minor.name,
      
      // Guardian of Estate (if applicable)
      'topmostSubform[0].Page2[0].Name8b_ft[0]': data.guardian.name || data.petitioner.name,
      'topmostSubform[0].Page2[0].Address8b_ft[0]': data.guardian.address || data.petitioner.address,
      'topmostSubform[0].Page2[0].Telephone8b_ft[0]': data.guardian.phone || data.petitioner.phone,
      'topmostSubform[0].Page2[0].NameWard8b_ft[0]': data.minor.name,
    };
    
    // Attorney Fees (Page 1 & 2)
    const feeFields = {
      'topmostSubform[0].Page1[0].AttyName6_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].AttyCost6_ft[0]': data.fees.amount || '',
      'topmostSubform[0].Page2[0].AttyPayee11_ft[0]': data.attorney.name,
      'topmostSubform[0].Page2[0].AmtPayable11_ft[0]': data.fees.amount || '',
      'topmostSubform[0].Page2[0].TermsPay11_ft[0]': data.fees.terms || '',
    };
    
    // Court Investigator (Page 1)
    const investigatorFields = {
      'topmostSubform[0].Page1[0].CI7_ft[0]': data.investigator.info || '',
    };
    
    // Bond Information (Page 2)
    const bondFields = {
      'topmostSubform[0].Page2[0].BondAmt10b_ft[0]': data.bond.amount || '',
      'topmostSubform[0].Page2[0].DepAmt10c_ft[0]': data.bond.blocked_amount || '',
      'topmostSubform[0].Page2[0].FinInst10c[0]': data.bond.institution || '',
    };
    
    // Probate Referee (Page 3)
    const refereeFields = {
      'topmostSubform[0].Page3[0].ProbRef16_ft[0]': data.referee.info || '',
    };
    
    // Judge Signature (Page 3)
    const signatureFields = {
      'topmostSubform[0].Page3[0].SigDate_ft[0]': formatDate(new Date()),
      'topmostSubform[0].Page3[0].NoPages5_ft[0]': '0', // Pages attached
      'topmostSubform[0].Page3[0].NoPages5_ft[1]': '', // Boxes checked
    };
    
    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtFields,
      ...caseFields,
      ...hearingFields,
      ...appearanceFields,
      ...appointmentFields,
      ...feeFields,
      ...investigatorFields,
      ...bondFields,
      ...refereeFields,
      ...signatureFields
    };
    
    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }
    
    // CHECKBOXES
    const checkboxes = {
      // Type of Guardianship (header)
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CaseNameGdnship[0].PersonCheckbox[0]': data.guardianship_type === 'person',
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CaseNameGdnship[0].EstateCheckbox[0]': data.guardianship_type === 'estate',
      'topmostSubform[0].Page2[0].CaseNameGdnship[0].EstateCheckbox[1]': data.guardianship_type === 'person',
      'topmostSubform[0].Page2[0].CaseNameGdnship[0].EstateCheckbox[0]': data.guardianship_type === 'estate',
      'topmostSubform[0].Page3[0].CaseNameGdnship[0].EstateCheckbox[1]': data.guardianship_type === 'person',
      'topmostSubform[0].Page3[0].CaseNameGdnship[0].EstateCheckbox[0]': data.guardianship_type === 'estate',
      
      // Hearing location
      'topmostSubform[0].Page1[0].Checkbox1b1[0]': true, // Dept
      'topmostSubform[0].Page1[0].Checkbox1b2[0]': data.hearing.room ? true : false, // Room
      
      // Appearances
      'topmostSubform[0].Page1[0].Checkbox1c[0]': true, // Petitioner appeared
      'topmostSubform[0].Page1[0].Checkbox1d[0]': true, // Attorney for petitioner
      'topmostSubform[0].Page1[0].Checkbox1e[0]': data.minor.attorney_name ? true : false,
      
      // Notices (Page 1)
      'topmostSubform[0].Page1[0].Checkbox2a[0]': true, // All notices given
      'topmostSubform[0].Page1[0].Checkbox2b1[0]': false, // Notice dispensed
      
      // Findings (Page 1)
      'topmostSubform[0].Page1[0].Checkbox3\.\.1[0]': true, // Appointment necessary
      'topmostSubform[0].Page1[0].Checkbox3\.2[0]': data.guardianship_type === 'person',
      'topmostSubform[0].Page1[0].Checkbox3\.2[1]': data.guardianship_type === 'estate',
      
      // Powers and fees
      'topmostSubform[0].Page1[0].Checkbox5[0]': data.independent_powers || false,
      'topmostSubform[0].Page1[0].Checkbox6[0]': data.attorney.appointed || false,
      'topmostSubform[0].Page1[0].Checkbox[1]': data.investigator.appointed || false,
      
      // Appointments (Page 2)
      'topmostSubform[0].Page2[0].CheckBox8a[0]': data.guardianship_type === 'person',
      'topmostSubform[0].Page2[0].CheckBox8b[0]': data.guardianship_type === 'estate',
      
      // Bond (Page 2)
      'topmostSubform[0].Page2[0].Checkbox10a[0]': !data.bond.required,
      'topmostSubform[0].Page2[0].Checkbox10b[0]': data.bond.required,
      'topmostSubform[0].Page2[0].Checkbox10b[1]': data.bond.blocked_amount ? true : false,
      'topmostSubform[0].Page2[0].Checkbox10b[3]': !data.take_possession || false,
      
      // Legal fees
      'topmostSubform[0].Page2[0].Checkbox10b[5]': data.fees.amount ? true : false,
      'topmostSubform[0].Page2[0].Checkbox10b[6]': true, // From estate
      'topmostSubform[0].Page2[0].Checkbox11\.4[0]': true, // Forthwith
      
      // Powers granted
      'topmostSubform[0].Page2[0].Checkbox5[0]': false, // Person powers in attachment
      'topmostSubform[0].Page2[0].Checkbox5[1]': data.independent_powers || false,
      
      // Other orders
      'topmostSubform[0].Page3[0].Checkbox5[0]': false, // Conditions in attachment
      'topmostSubform[0].Page3[0].Checkbox15[0]': false, // Other orders
      'topmostSubform[0].Page3[0].Checkbox15[1]': data.referee.appointed || false,
    };
    
    // Set all checkboxes
    for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
      try {
        const checkbox = form.getCheckBox(fieldName);
        if (shouldCheck) {
          checkbox.check();
        } else {
          checkbox.uncheck();
        }
        console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
      } catch (e) {
        console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
      }
    }
    
    return await pdfDoc.save();
  } catch (error) {
    console.error('Error filling GC-240:', error);
    throw error;
  }
}
async function fillGC250(data) {
  try {
    // Load the unlocked GC-250 PDF
    const existingPdfBytes = await window.fs.readFile('GC-250-unlocked.pdf');
    const pdfDoc = await PDFLib.PDFDocument.load(existingPdfBytes);
    const form = pdfDoc.getForm();

    // Court Information Fields
    if (data.courtInfo?.county) {
      const countyField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CrtCounty_ft[0]');
      countyField.setText(data.courtInfo.county.toUpperCase());
    }
    
    if (data.courtInfo?.branch) {
      const branchField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Branch_ft[0]');
      branchField.setText(data.courtInfo.branch);
    }
    
    if (data.courtInfo?.address) {
      const streetField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Street_ft[0]');
      streetField.setText(data.courtInfo.address);
    }
    
    if (data.courtInfo?.cityZip) {
      const cityZipField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CityZip_ft[0]');
      cityZipField.setText(data.courtInfo.cityZip);
    }
    
    if (data.courtInfo?.mailingAddress) {
      const mailingField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].MailingAdd_ft[0]');
      mailingField.setText(data.courtInfo.mailingAddress);
    }

    // Party Name (Ward/Minor)
    if (data.ward?.name) {
      const partyField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].TitlePartyName[0].Party1_ft[0]');
      partyField.setText(data.ward.name.toUpperCase());
    }

    // Case Number
    if (data.caseNumber) {
      const caseNumberField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].CaseNumber[0].CaseNumber_ft[0]');
      caseNumberField.setText(data.caseNumber);
      
      // Also fill case number on page 2
      const caseNumberField2 = form.getTextField('topmostSubform[0].Page2[0].CaseNumber[0].CaseNumber_ft[0]');
      caseNumberField2.setText(data.caseNumber);
    }

    // Estate/Person checkboxes in header
    if (data.guardianshipType) {
      if (data.guardianshipType === 'estate') {
        const estateBox = form.getCheckBox('topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].MinorCheckbox[0]');
        estateBox.check();
      } else if (data.guardianshipType === 'person') {
        const personBox = form.getCheckBox('topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].MinorsCheckBox[0]');
        personBox.check();
      }
    }

    // Attorney Information
    if (data.attorney?.name) {
      const attyNameField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyName_ft[0]');
      attyNameField.setText(data.attorney.name.toUpperCase());
    }
    
    if (data.attorney?.firm) {
      const firmField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFirm_ft[0]');
      firmField.setText(data.attorney.firm);
    }
    
    if (data.attorney?.address) {
      const streetField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyStreet_ft[0]');
      streetField.setText(data.attorney.address);
    }
    
    if (data.attorney?.city) {
      const cityField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyCity_ft[0]');
      cityField.setText(data.attorney.city);
    }
    
    if (data.attorney?.state) {
      const stateField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyState_ft[0]');
      stateField.setText(data.attorney.state);
    }
    
    if (data.attorney?.zip) {
      const zipField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyZip_ft[0]');
      zipField.setText(data.attorney.zip);
    }
    
    if (data.attorney?.phone) {
      const phoneField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Phone_ft[0]');
      phoneField.setText(data.attorney.phone);
    }
    
    if (data.attorney?.fax) {
      const faxField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Fax_ft[0]');
      faxField.setText(data.attorney.fax);
    }
    
    if (data.attorney?.email) {
      const emailField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Email_ft[0]');
      emailField.setText(data.attorney.email);
    }
    
    if (data.attorney?.barNumber) {
      const barField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyBarNo_dc[0]');
      barField.setText(data.attorney.barNumber);
    }
    
    if (data.attorney?.representing) {
      const attyForField = form.getTextField('topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFor_ft[0]');
      attyForField.setText(data.attorney.representing);
    }

    // Guardian Name (First instance)
    if (data.guardian?.name) {
      const guardianField = form.getTextField('topmostSubform[0].Page1[0].NameGdn1_ft[0]');
      guardianField.setText(data.guardian.name.toUpperCase());
    }

    // Person/Estate checkboxes (main content)
    if (data.guardianshipType) {
      if (data.guardianshipType === 'person') {
        const personBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox1\\.1person[0]');
        personBox.check();
      } else if (data.guardianshipType === 'estate') {
        const estateBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBx1\\.2estate[0]');
        estateBox.check();
      }
    }

    // Ward Name (of name field)
    if (data.ward?.name) {
      const wardField = form.getTextField('topmostSubform[0].Page1[0].NameWard1_ft[0]');
      wardField.setText(data.ward.name.toUpperCase());
    }

    // Additional Guardian Name (if joint guardianship)
    if (data.guardian?.coGuardianName) {
      const coGuardianField = form.getTextField('topmostSubform[0].Page1[0].NameGdn2_ft[0]');
      coGuardianField.setText(data.guardian.coGuardianName.toUpperCase());
    }

    // Additional Ward Name (if multiple wards)
    if (data.ward?.additionalWardName) {
      const additionalWardField = form.getTextField('topmostSubform[0].Page1[0].NameWard2_ft[0]');
      additionalWardField.setText(data.ward.additionalWardName.toUpperCase());
    }

    // 18th Birthday Extension Date
    if (data.ward?.eighteenthBirthdayExtension) {
      const birthdayField = form.getTextField('topmostSubform[0].Page1[0].Ward18thBday2_ft[0]');
      birthdayField.setText(data.ward.eighteenthBirthdayExtension);
    }

    // Powers and Conditions Checkboxes
    if (data.powers?.otherPowersGranted) {
      const otherPowersBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3[0]');
      otherPowersBox.check();
    }
    
    if (data.powers?.independentPowers) {
      const independentBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3a_ft[0]');
      independentBox.check();
    }
    
    if (data.powers?.propertyConditions) {
      const propertyBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3b_ft[0]');
      propertyBox.check();
    }
    
    if (data.powers?.careConditions) {
      const careBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3c_ft[0]');
      careBox.check();
    }
    
    if (data.powers?.otherConditionsGranted) {
      const otherConditionsBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3e1_ft[0]');
      otherConditionsBox.check();
    }
    
    if (data.powers?.attachmentSpecified) {
      const attachmentBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3e2_ft[0]');
      attachmentBox.check();
    }
    
    if (data.powers?.specifiedBelow) {
      const specifiedBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3e3_ft[0]');
      specifiedBox.check();
    }

    // Other Powers Text Field
    if (data.powers?.otherPowersText) {
      const otherTextField = form.getTextField('topmostSubform[0].Page1[0].Text3e_ft[0]');
      otherTextField.setText(data.powers.otherPowersText);
    }

    // Number of Pages Attached
    if (data.attachments?.numberOfPages) {
      const pagesField = form.getTextField('topmostSubform[0].Page1[0].NoPages5_ft[0]');
      pagesField.setText(data.attachments.numberOfPages.toString());
    }

    // Date Field
    if (data.orderDate) {
      const dateField = form.getTextField('topmostSubform[0].Page1[0].Date_ft[0]');
      dateField.setText(data.orderDate);
    }

    // Guardianship Termination Date
    if (data.ward?.terminationDate) {
      const terminationField = form.getTextField('topmostSubform[0].Page1[0].Ward18thBday2_ft[1]');
      terminationField.setText(data.ward.terminationDate);
    }

    // Property Authorization Checkbox
    if (data.powers?.notAuthorizedProperty) {
      const notAuthorizedBox = form.getCheckBox('topmostSubform[0].Page1[0].CheckBox3[1]');
      notAuthorizedBox.check();
    }

    // Page 2 Fields
    // Party name on page 2 - (name):
    if (data.ward?.name) {
      const partyField2 = form.getTextField('topmostSubform[0].Page2[0].TitlePartyName[0].Party1_ft[0]');
      partyField2.setText(data.ward.name.toUpperCase());
    }

    // Execution Information
    // Executed on (date):
    if (data.execution?.date) {
      const executionDateField = form.getTextField('topmostSubform[0].Page2[0].DateSigApptee_ft[0]');
      executionDateField.setText(data.execution.date);
    }
    
    // , at (place):
    if (data.execution?.place) {
      const placeField = form.getTextField('topmostSubform[0].Page2[0].PlaceSigSigned_ft[0]');
      placeField.setText(data.execution.place);
    }
    
    // (TYPE OR PRINT NAME)
    if (data.guardian?.name) {
      const appointeeNameField = form.getTextField('topmostSubform[0].Page2[0].AppointeeName_ft[0]');
      appointeeNameField.setText(data.guardian.name.toUpperCase());
    }

    // Clerk Date - Date:
    if (data.clerk?.signatureDate) {
      const clerkDateField = form.getTextField('topmostSubform[0].Page2[0].DateClerkSig_ft[0]');
      clerkDateField.setText(data.clerk.signatureDate);
    }

    console.log('GC-250 form filled successfully with', Object.keys(data).length, 'data sections');
    return await pdfDoc.save();
    
  } catch (error) {
    console.error('Error filling GC-250:', error);
    throw error;
  }
}

// Example usage data structure:
const exampleGC250Data = {
  courtInfo: {
    county: "LOS ANGELES",
    branch: "STANLEY MOSK COURTHOUSE",
    address: "111 North Hill Street",
    cityZip: "Los Angeles, CA 90012",
    mailingAddress: "Same as above"
  },
  caseNumber: "24STPB00123",
  ward: {
    name: "JANE MINOR DOE",
    additionalWardName: null,
    eighteenthBirthdayExtension: "01/15/2026",
    terminationDate: "01/15/2025"
  },
  guardian: {
    name: "JOHN GUARDIAN DOE",
    coGuardianName: null
  },
  guardianshipType: "person", // or "estate"
  attorney: {
    name: "JANE ATTORNEY SMITH",
    firm: "Smith & Associates",
    address: "123 Legal Street",
    city: "Los Angeles",
    state: "CA",
    zip: "90028",
    phone: "(213) 555-0123",
    fax: "(213) 555-0124",
    email: "jsmith@lawfirm.com",
    barNumber: "123456",
    representing: "Petitioner"
  },
  powers: {
    otherPowersGranted: false,
    independentPowers: false,
    propertyConditions: false,
    careConditions: false,
    otherConditionsGranted: false,
    attachmentSpecified: false,
    specifiedBelow: false,
    otherPowersText: "",
    notAuthorizedProperty: true
  },
  attachments: {
    numberOfPages: "0"
  },
  orderDate: "09/04/2025",
  execution: {
    date: "09/04/2025",
    place: "Los Angeles, California"
  },
  clerk: {
    signatureDate: "09/04/2025"
  }
};

/* 
GC-250 FIELD MAPPING SUMMARY (51 total fields):

COURT INFORMATION:
- County: topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CrtCounty_ft[0]
- Branch: topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Branch_ft[0]
- Street: topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Street_ft[0]
- City/Zip: topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CityZip_ft[0]
- Mailing: topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].MailingAdd_ft[0]

PARTY/CASE INFO:
- Party Name: topmostSubform[0].Page1[0].StdP1Header_sf[0].TitlePartyName[0].Party1_ft[0]
- Case Number: topmostSubform[0].Page1[0].StdP1Header_sf[0].CaseNumber[0].CaseNumber_ft[0]
- Estate/Person Checkboxes: MinorCheckbox[0], MinorsCheckBox[0]

ATTORNEY INFO:
- Name: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyName_ft[0]
- Firm: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFirm_ft[0]
- Address: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyStreet_ft[0]
- City: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyCity_ft[0]
- State: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyState_ft[0]
- ZIP: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyZip_ft[0]
- Phone: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Phone_ft[0]
- Fax: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Fax_ft[0]
- Email: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Email_ft[0]
- Bar #: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyBarNo_dc[0]
- Attorney For: topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFor_ft[0]

GUARDIANSHIP INFO:
- Guardian Name: topmostSubform[0].Page1[0].NameGdn1_ft[0]
- Person/Estate: CheckBox1\.1person[0], CheckBx1\.2estate[0]
- Ward Name: topmostSubform[0].Page1[0].NameWard1_ft[0]
- Co-Guardian: topmostSubform[0].Page1[0].NameGdn2_ft[0]
- Additional Ward: topmostSubform[0].Page1[0].NameWard2_ft[0]
- 18th Birthday: topmostSubform[0].Page1[0].Ward18thBday2_ft[0]

POWERS & CONDITIONS:
- Multiple checkboxes for various powers and conditions
- Text field for additional specifications
- Number of pages attached

PAGE 2 EXECUTION:
- Case Number: topmostSubform[0].Page2[0].CaseNumber[0].CaseNumber_ft[0]
- Party Name: topmostSubform[0].Page2[0].TitlePartyName[0].Party1_ft[0]
- Execution Date: topmostSubform[0].Page2[0].DateSigApptee_ft[0]
- Place: topmostSubform[0].Page2[0].PlaceSigSigned_ft[0]
- Appointee Name: topmostSubform[0].Page2[0].AppointeeName_ft[0]
- Clerk Date: topmostSubform[0].Page2[0].DateClerkSig_ft[0]
*/
