// netlify/functions/process-conservatorship.js
const { PDFDocument } = require('pdf-lib');

// Helper functions
function formatDate(dateString) {
  if (!dateString) return "";
  const date = new Date(dateString);
  return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}/${date.getFullYear()}`;
}

function formatCurrency(value) {
  if (!value) return "0.00";
  const num = parseFloat(value.toString().replace(/[^0-9.-]/g, ''));
  return num.toFixed(2);
}

// Transform webhook data from JotForm or other sources
function transformConservatorshipData(webhookData) {
  const personalProperty = parseFloat((webhookData.personal_property_value || '0').toString().replace(/[^0-9.-]/g, '')) || 0;
  const realProperty = parseFloat((webhookData.real_property_value || '0').toString().replace(/[^0-9.-]/g, '')) || 0;
  const annualIncome = parseFloat((webhookData.annual_income || '0').toString().replace(/[^0-9.-]/g, '')) || 0;
  const totalEstate = personalProperty + realProperty;
  
  return {
    // Attorney Information
    attorney: {
      name: webhookData.attorney_name || "ROZSA GYENE, ESQ.",
      bar_number: webhookData.attorney_bar || "208356",
      firm_name: webhookData.firm_name || "LAW OFFICES OF ROZSA GYENE",
      street: webhookData.firm_street || "450 N BRAND BLVD SUITE 600",
      city: webhookData.firm_city || "GLENDALE",
      state: webhookData.firm_state || "CA",
      zip: webhookData.firm_zip || "91203",
      phone: webhookData.firm_phone || "818-291-6217",
      fax: webhookData.firm_fax || "818-291-6205",
      email: webhookData.firm_email || "ROZSAGYENELAW@YAHOO.COM",
      representing: `Petitioner ${webhookData.petitioner_name || ''}`,
      appointed: webhookData.attorney_appointed === "yes"
    },
    
    // Court Information
    court: {
      county: webhookData.court_county || "LOS ANGELES",
      branch: webhookData.court_branch || "STANLEY MOSK COURTHOUSE",
      street: webhookData.court_street || "111 N HILL ST",
      city: webhookData.court_city || "LOS ANGELES",
      zip: webhookData.court_zip || "90012"
    },
    
    // Case Information
    case_number: webhookData.case_number || '',
    caseNumber: webhookData.case_number || '',
    conservatorship_type: webhookData.conservatorship_type || "person",
    is_limited: webhookData.is_limited === "yes",
    is_general: webhookData.is_general === "yes" || webhookData.is_limited !== "yes",
    is_successor: webhookData.is_successor === "yes",
    is_temporary: webhookData.is_temporary === "yes",
    
    // Petitioner Information
    petitioner: {
      name: webhookData.petitioner_name || '',
      address: webhookData.petitioner_address || '',
      phone: webhookData.petitioner_phone || '',
      relationship: webhookData.petitioner_relationship || '',
      relationship_type: webhookData.petitioner_relationship_type || 'relative',
      is_related: webhookData.petitioner_related === "yes"
    },
    
    // Conservator Information
    conservator: {
      name: webhookData.conservator_name || webhookData.petitioner_name || '',
      address: webhookData.conservator_address || webhookData.petitioner_address || '',
      phone: webhookData.conservator_phone || webhookData.petitioner_phone || '',
      ssn: webhookData.conservator_ssn || '',
      driverLicense: webhookData.conservator_dl || '',
      state: webhookData.conservator_state || 'CA',
      homePhone: webhookData.conservator_home_phone || '',
      workPhone: webhookData.conservator_work_phone || '',
      otherPhone: webhookData.conservator_other_phone || '',
      corporationName: webhookData.conservator_corporation || '',
      license_number: webhookData.conservator_license_number || '',
      license_issue_date: formatDate(webhookData.conservator_license_issue),
      license_expiry_date: formatDate(webhookData.conservator_license_expiry),
      professional_fiduciary: webhookData.professional_fiduciary === "yes",
      private_professional: webhookData.private_professional === "yes",
      nonprofit_charitable: webhookData.nonprofit_charitable === "yes"
    },
    
    // Conservatee Information
    conservatee: {
      name: webhookData.conservatee_name || '',
      phone: webhookData.conservatee_phone || '',
      address: webhookData.conservatee_address || '',
      dateOfBirth: formatDate(webhookData.conservatee_dob),
      age: webhookData.conservatee_age || '',
      ssn: webhookData.conservatee_ssn || '',
      is_ca_resident: webhookData.conservatee_ca_resident !== "no",
      is_county_resident: webhookData.conservatee_county_resident !== "no",
      unable_provide_needs: webhookData.unable_provide_needs === "yes",
      unable_manage_finances: webhookData.unable_manage_finances === "yes",
      attorney_name: webhookData.conservatee_attorney || '',
      disqualified_voting: webhookData.disqualified_voting === "yes",
      major_neurocognitive: webhookData.major_neurocognitive === "yes"
    },
    
    // Estate Information
    estate: {
      personal_property: formatCurrency(personalProperty),
      annual_income: formatCurrency(annualIncome),
      real_property: formatCurrency(realProperty),
      total: formatCurrency(totalEstate),
      blocked_account: webhookData.blocked_account || '',
      trust_income: formatCurrency(webhookData.trust_income || 0),
      public_benefits: formatCurrency(webhookData.public_benefits || 0),
      wages_salary: formatCurrency(webhookData.wages_salary || 0),
      other_income: formatCurrency(webhookData.other_income || 0)
    },
    
    // Bond Information
    bond: {
      required: webhookData.bond_required === "yes",
      amount: formatCurrency(webhookData.bond_amount || totalEstate),
      blocked_amount: formatCurrency(webhookData.blocked_amount || 0),
      blocked_account: webhookData.blocked_account || '',
      institution: webhookData.bond_institution || '',
      waived: webhookData.bond_waived === "yes"
    },
    
    // Hearing Information
    hearing: {
      date: formatDate(webhookData.hearing_date || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)),
      datetime: webhookData.hearing_datetime || '',
      time: webhookData.hearing_time || "8:30 AM",
      dept: webhookData.hearing_dept || "11",
      department: webhookData.hearing_dept || "11",
      room: webhookData.hearing_room || "",
      judge: webhookData.hearing_judge || "",
      dateTime: `${formatDate(webhookData.hearing_date)} at ${webhookData.hearing_time || "8:30 AM"}`
    },
    
    // Powers and Conditions
    powers: {
      otherPowersGranted: webhookData.other_powers === "yes",
      independentPowers: webhookData.independent_powers === "yes",
      propertyConditions: webhookData.property_conditions === "yes",
      careConditions: webhookData.care_conditions === "yes",
      otherConditionsGranted: webhookData.other_conditions === "yes",
      attachmentSpecified: webhookData.attachment_specified === "yes",
      specifiedBelow: webhookData.specified_below === "yes",
      otherPowersText: webhookData.other_powers_text || "",
      notAuthorizedProperty: webhookData.not_authorized_property === "yes",
      medicalDecisions: webhookData.medical_decisions === "yes",
      dementiaPowersMedical: webhookData.dementia_powers_medical === "yes",
      dementiaPowersPlacement: webhookData.dementia_powers_placement === "yes"
    },
    
    // Fees
    fees: {
      amount: formatCurrency(webhookData.attorney_fees || 0),
      terms: webhookData.fee_terms || "Forthwith from estate"
    },
    
    // Court Info formatted for GC-312
    courtInfo: {
      county: webhookData.court_county || "LOS ANGELES",
      address: webhookData.court_street || "111 N HILL ST",
      mailingAddress: webhookData.court_mailing || "Same as above",
      branch: webhookData.court_branch || "STANLEY MOSK COURTHOUSE",
      cityZip: `${webhookData.court_city || 'Los Angeles'}, CA ${webhookData.court_zip || '90012'}`
    },
    
    // Additional fields
    independent_powers: webhookData.independent_powers === "yes",
    orderApproved: webhookData.order_approved === "yes",
    attachments: {
      numberOfPages: webhookData.attachment_pages || "0"
    },
    
    // Forms to generate
    forms: {
      gc310: webhookData.generate_gc310 !== false,
      gc312: webhookData.generate_gc312 !== false,
      gc320: webhookData.generate_gc320 === true || webhookData.is_temporary === "yes",
      gc340: webhookData.generate_gc340 === true || webhookData.order_approved === "yes",
      gc350: webhookData.generate_gc350 === true || webhookData.order_approved === "yes"
    }
  };
}

// Load PDF from deployed Netlify site
async function loadPDFFromRepo(filename) {
  const fetch = (await import('node-fetch')).default;
  const url = `https://guardianship-conservatorship.netlify.app/templates/conservatorship/${filename}`;
  
  try {
    console.log(`Loading ${filename} from deployed site...`);
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to load ${filename}: ${response.statusText}`);
    }
    const buffer = await response.buffer();
    return buffer;
  } catch (error) {
    console.error(`Error loading ${filename}:`, error);
    throw error;
  }
}

// GC-310 Form Filler Function (Petition for Appointment of Probate Conservator)
async function fillGC310(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-310 has ${form.getFields().length} fields available`);
    
    // PAGE 1 HEADER - Attorney Information
    const attorneyFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyName_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyBarNo_dc[0]': data.attorney.bar_number,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFirm_ft[0]': data.attorney.firm_name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyStreet_ft[0]': data.attorney.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyCity_ft[0]': data.attorney.city,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyState_ft[0]': data.attorney.state,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyZip_ft[0]': data.attorney.zip,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Phone_ft[0]': data.attorney.phone,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Fax_ft[0]': data.attorney.fax,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Email_ft[0]': data.attorney.email,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFor_ft[0]': `Petitioner ${data.petitioner.name}`,
    };
    
    // Court Information
    const courtFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CrtCounty_ft[0]': data.court.county,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Street_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].MailingAdd_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Branch_ft[0]': data.court.branch,
    };
    
    // Case Information
    const caseFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || 'To be assigned',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].TitlePartyName[0].Party2_ft[0]': data.conservatee.name,
    };
    
    // Hearing Information  
    const hearingFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].HearingInfo_sf[0].HearingDateTime_ft[0]': data.hearing.datetime || `${data.hearing.date} at ${data.hearing.time}`,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].HearingInfo_sf[0].Dept_ft[0]': data.hearing.dept,
    };
    
    // Petitioner Information (Section 1a)
    const petitionerFields = {
      'topmostSubform[0].Page1[0].FillText156[0]': data.petitioner.name,
      'topmostSubform[0].Page1[0].FillText157[0]': data.petitioner.name,
      'topmostSubform[0].Page1[0].FillText158[0]': data.petitioner.phone,
      'topmostSubform[0].Page1[0].FillText164[0]': data.petitioner.address,
    };
    
    // Proposed Conservator (Section 1b)
    const conservatorFields = {
      'topmostSubform[0].Page1[0].FillText160[0]': data.conservator.name || data.petitioner.name,
      'topmostSubform[0].Page1[0].FillText162[0]': data.conservator.phone || data.petitioner.phone,
      'topmostSubform[0].Page1[0].FillText163[0]': data.conservator.address || data.petitioner.address,
    };
    
    // Conservatee Information (Page 2)
    const conservateeFields = {
      'topmostSubform[0].Page2[0].FillText171[0]': data.conservatee.name,
      'topmostSubform[0].Page2[0].FillText172[0]': data.conservatee.phone,
      'topmostSubform[0].Page2[0].FillText174[0]': data.conservatee.address,
    };
    
    // Bond Information
    const bondFields = {
      'topmostSubform[0].Page1[0].FillText165[0]': data.bond.amount || '',
      'topmostSubform[0].Page1[0].FillText166[0]': data.bond.blocked_account || '',
      'topmostSubform[0].Page1[0].FillText167[0]': data.bond.institution || '',
    };
    
    // Estate Values (Page 3)
    const estateFields = {
      'topmostSubform[0].Page3[0].FillText22[0]': data.estate.personal_property || '',
      'topmostSubform[0].Page3[0].FillText26[0]': data.estate.annual_income || '',
      'topmostSubform[0].Page3[0].FillText27[0]': data.estate.real_property || '',
      'topmostSubform[0].Page3[0].FillText28[0]': data.estate.total || '',
    };
    
    // Petitioner Relationship (Page 2, Section 3b)
    const relationshipField = {
      'topmostSubform[0].Page2[0].FillText2[0]': data.petitioner.relationship || '',
    };
    
    // Signatures (Page 8)
    const signatureFields = {
      'topmostSubform[0].Page8[0].FillText61[0]': data.attorney.name,
      'topmostSubform[0].Page8[0].FillText81[0]': formatDate(new Date()),
      'topmostSubform[0].Page8[0].FillText61[1]': data.petitioner.name,
      'topmostSubform[0].Page8[0].FillText83[0]': formatDate(new Date()),
    };
    
    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtFields,
      ...caseFields,
      ...hearingFields,
      ...petitionerFields,
      ...conservatorFields,
      ...conservateeFields,
      ...bondFields,
      ...estateFields,
      ...relationshipField,
      ...signatureFields
    };
    
    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }
    
    // CHECKBOXES
    const checkboxes = {
      // Type of Conservatorship (header)
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBox22[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBx22[0]': data.conservatorship_type === 'estate',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].ChckBx22[0]': data.is_limited || false,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].successor_cb[0]': data.is_successor || false,
      
      // Bond requirements (Section 1c)
      'topmostSubform[0].Page1[0].CheckBox13[0]': !data.bond.required,
      'topmostSubform[0].Page1[0].CheckBox9[0]': data.bond.required,
      'topmostSubform[0].Page1[0].CheckBox8[0]': data.bond.blocked_account ? true : false,
      
      // Powers requested
      'topmostSubform[0].Page1[0].CheckBox7[0]': data.independent_powers || false,
      'topmostSubform[0].Page1[0].CheckBox2[0]': data.powers.medicalDecisions || false,
      
      // Petitioner is conservator (same person)
      'topmostSubform[0].Page1[0].CheckBx19[0]': data.petitioner.name === data.conservator.name,
      'topmostSubform[0].Page1[0].ChckBx19[0]': data.is_limited && (data.petitioner.name === data.conservator.name),
      
      // Conservatee residence (Page 2)
      'topmostSubform[0].Page2[0].CheckBox46[0]': data.conservatee.is_ca_resident !== false,
      'topmostSubform[0].Page2[0].CheckBox45[0]': data.conservatee.is_county_resident !== false,
      
      // Petitioner relationship (Page 2)
      'topmostSubform[0].Page2[0].CheckBox30[0]': data.petitioner.relationship_type === 'relative',
      'topmostSubform[0].Page2[0].CheckBox32[0]': data.petitioner.relationship_type === 'spouse',
      
      // Conservatee condition (Page 5)
      'topmostSubform[0].Page5[0].CheckBox119[0]': data.conservatee.unable_manage_finances !== false,
      'topmostSubform[0].Page5[0].CheckBox79[0]': data.conservatee.unable_provide_needs !== false,
      
      // Required forms (Page 6 & 8)
      'topmostSubform[0].Page6[0].CheckBox114[0]': true,
      'topmostSubform[0].Page8[0].CheckBox151[0]': true,
    };
    
    // Set all checkboxes
    for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
      try {
        const checkbox = form.getCheckBox(fieldName);
        if (shouldCheck) {
          checkbox.check();
        } else {
          checkbox.uncheck();
        }
        console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
      } catch (e) {
        console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
      }
    }
    
    return await pdfDoc.save();
  } catch (error) {
    console.error('Error filling GC-310:', error);
    throw error;
  }
}

// GC-312 Form Filler Function (Confidential Supplemental Information)
async function fillGC312(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-312 has ${form.getFields().length} fields available`);

    // Attorney/Party Information
    const attorneyFields = {
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].AttyBarNo[0]': data.attorney.bar_number,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].ConservatorName[0]': data.attorney.name.toUpperCase(),
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].AttyFirm[0]': data.attorney.firm_name,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].Street[0]': data.attorney.street,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].City[0]': data.attorney.city,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].State[0]': data.attorney.state,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].Zip[0]': data.attorney.zip,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].Phone[0]': data.attorney.phone,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].Fax[0]': data.attorney.fax,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].Email[0]': data.attorney.email,
      'GC-312[0].Page1[0].p1Caption[0].AttyPartyInfo[0].AttyFor[0]': data.attorney.representing,
    };

    // Court Information
    const courtInfoFields = {
      'GC-312[0].Page1[0].p1Caption[0].CourtInfo[0].CrtCounty[0]': data.courtInfo.county.toUpperCase(),
      'GC-312[0].Page1[0].p1Caption[0].CourtInfo[0].CrtStreet[0]': data.courtInfo.address,
      'GC-312[0].Page1[0].p1Caption[0].CourtInfo[0].CrtMailingAdd[0]': data.courtInfo.mailingAddress,
      'GC-312[0].Page1[0].p1Caption[0].CourtInfo[0].CrtCityZip[0]': data.courtInfo.cityZip,
      'GC-312[0].Page1[0].p1Caption[0].CourtInfo[0].CrtBranch[0]': data.courtInfo.branch,
    };

    // Conservatee Information (repeated on all pages)
    const conservateeNameFields = [
      'GC-312[0].Page1[0].p1Caption[0].TitlePartyName[0].Conservatee_ft[0]',
      'GC-312[0].Page2[0].p2Caption_sf[0].pxCaption[0].TitlePartyName[0].Conservatee_ft[0]',
      'GC-312[0].Page3[0].p3Caption_sf[0].pxCaption[0].TitlePartyName[0].Conservatee_ft[0]',
      'GC-312[0].Page4[0].p4Caption_sf[0].pxCaption[0].TitlePartyName[0].Conservatee_ft[0]'
    ];

    // Case Number (repeated on all pages)
    const caseNumberFields = [
      'GC-312[0].Page1[0].p1Caption[0].CaseNumber[0].CaseNumber[0]',
      'GC-312[0].Page2[0].p2Caption_sf[0].pxCaption[0].CaseNumber[0].CaseNumber[0]',
      'GC-312[0].Page3[0].p3Caption_sf[0].pxCaption[0].CaseNumber[0].CaseNumber[0]',
      'GC-312[0].Page4[0].p4Caption_sf[0].pxCaption[0].CaseNumber[0].CaseNumber[0]'
    ];

    // Hearing Information
    const hearingFields = {
      'GC-312[0].Page1[0].p1Caption[0].HearingDate[0].HearingDt[0]': data.hearing.date,
      'GC-312[0].Page1[0].p1Caption[0].Dept-Time[0].Dept[0]': data.hearing.department,
      'GC-312[0].Page1[0].p1Caption[0].Dept-Time[0].Time[0]': data.hearing.time,
    };

    // Item 1 - Proposed Conservatee Details
    const conservateeDetailsFields = {
      'GC-312[0].Page1[0].Item1[0].Conservatee_ft[0]': data.conservatee.name.toUpperCase(),
      'GC-312[0].Page1[0].Item1[0].DOB_ft[0]': data.conservatee.dateOfBirth,
      'GC-312[0].Page1[0].Item1[0].Age_ft[0]': data.conservatee.age.toString(),
      'GC-312[0].Page1[0].Item1[0].SSN_ft[0]': data.conservatee.ssn,
    };

    // Item 3 - Personal Needs Information
    const personalNeedsFields = {
      'GC-312[0].Page1[0].Item3[0].Item3a[0].PhysHealth_ft[0]': 'Conservatee requires assistance with medical care and decisions',
      'GC-312[0].Page1[0].Item3[0].Item3b[0].Food_ft[0]': 'Conservatee requires assistance with meal preparation and nutrition',
      'GC-312[0].Page1[0].Item3[0].Item3c[0].Clothing_ft[0]': 'Conservatee requires assistance with appropriate clothing',
      'GC-312[0].Page1[0].Item3[0].Item3d[0].Shelter_ft[0]': 'Conservatee requires assistance with safe housing arrangements',
    };

    // Item 4 - Financial Resources (Page 2)
    const financialFields = {
      'GC-312[0].Page2[0].Item4[0].FinRes_ft[0]': 'Conservatee is unable to manage financial resources and requires assistance with financial decisions',
      'GC-312[0].Page2[0].Item4[0].FrdUndueInfl_ft[0]': 'Conservatee may be subject to undue influence without proper oversight',
    };

    // Item 5 - Residence Information
    const residenceFields = {
      'GC-312[0].Page2[0].Item5[0].Item5a[0].ResNature_ft[0]': 'Private residence',
      'GC-312[0].Page2[0].Item5[0].Item5b[0].ResAddress_ft[0]': data.conservatee.address,
      'GC-312[0].Page2[0].Item5[0].Item5f[0].ReasonsFor5e[0]': 'With appropriate support and conservatorship oversight, conservatee can remain in current residence',
    };

    // Item 6 - Alternatives Considered (Page 3)
    const alternativesFields = {
      'GC-312[0].Page3[0].Item6[0].Item6a[0].SDM_ft[0]': 'Not feasible due to conservatee\'s cognitive limitations',
      'GC-312[0].Page3[0].Item6[0].Item6b[0].DesHCSurr_ft[0]': 'Conservatee unable to designate health care surrogate',
      'GC-312[0].Page3[0].Item6[0].Item6c[0].AHCD_ft[0]': 'Conservatee lacks capacity to execute advance directive',
      'GC-312[0].Page3[0].Item6[0].Item6d[0].POA_ft[0]': 'Conservatee lacks capacity to grant power of attorney',
      'GC-312[0].Page3[0].Item6[0].Item6e[0].Trust_ft[0]': 'Trust arrangements insufficient to address conservatee\'s needs',
      'GC-312[0].Page3[0].Item6[0].Item6f[0].OtherAlts_ft[0]': 'No other viable alternatives to conservatorship identified',
    };

    // Item 11 - Attachments
    const attachmentsField = {
      'GC-312[0].Page4[0].Item11[0].NumPages[0]': '0',
    };

    // Declaration Section
    const declarationFields = {
      'GC-312[0].Page4[0].PoPDec[0].SigDate[0]': formatDate(new Date()),
      'GC-312[0].Page4[0].PoPDec[0].TypePrintName[0]': data.petitioner.name.toUpperCase(),
    };

    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtInfoFields,
      ...hearingFields,
      ...conservateeDetailsFields,
      ...personalNeedsFields,
      ...financialFields,
      ...residenceFields,
      ...alternativesFields,
      ...attachmentsField,
      ...declarationFields
    };

    // Fill repeated fields
    conservateeNameFields.forEach(fieldName => {
      try {
        const field = form.getTextField(fieldName);
        field.setText(data.conservatee.name.toUpperCase());
      } catch (e) {
        console.log(`Could not set conservatee name field ${fieldName}: ${e.message}`);
      }
    });

    caseNumberFields.forEach(fieldName => {
      try {
        const field = form.getTextField(fieldName);
        field.setText(data.caseNumber || 'To be assigned');
      } catch (e) {
        console.log(`Could not set case number field ${fieldName}: ${e.message}`);
      }
    });

    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }

    // CHECKBOXES
    const checkboxes = {
      // Conservatorship Type
      'GC-312[0].Page1[0].p1Caption[0].FormTitle[0].Ltd_cb[0]': data.is_limited,
      'GC-312[0].Page1[0].p1Caption[0].FormTitle[0].Person_cb[0]': data.conservatorship_type === 'person',
      'GC-312[0].Page1[0].p1Caption[0].FormTitle[0].Estate_cb[0]': data.conservatorship_type === 'estate',
      
      // Item 2 - Role Selection
      'GC-312[0].Page1[0].Item2[0].Petitioner_cb[0]': true,
      'GC-312[0].Page1[0].Item2[0].PropConservator_cb[0]': data.petitioner.name === data.conservator.name,
      
      // Item 3 - Personal Needs
      'GC-312[0].Page1[0].Item3[0].Item3Main[0].PrsnlNeeds_cb[0]': data.conservatee.unable_provide_needs,
      
      // Item 4 - Financial Resources
      'GC-312[0].Page2[0].Item4[0].FinResources_cb[0]': data.conservatee.unable_manage_finances,
      
      // Item 5c - Current location
      'GC-312[0].Page2[0].Item5[0].Item5c[0].residence5\\.c[0]': true,
      
      // Item 5e - Living status
      'GC-312[0].Page2[0].Item5[0].Item5e[0].Item5e1[0].LivingRes_cb[0]': true,
      'GC-312[0].Page2[0].Item5[0].Item5e[0].Item5e1[0].Item5e1a[0].livinginthe5\\.e[0]': true,
      
      // Item 7 - Services
      'GC-312[0].Page4[0].Item7[0].Item7c[0].DontKnow_cb[0]': true,
      'GC-312[0].Page4[0].Item7[0].Item7c[0].HS_cb[0]': true,
      'GC-312[0].Page4[0].Item7[0].Item7c[0].SS_cb[0]': true,
      
      // Item 8 - Conservatee Knowledge
      'GC-312[0].Page4[0].Item8[0].Item8a[0].Knows_8\\.a[0]': true,
      'GC-312[0].Page4[0].Item8[0].Item8b[0].Agrees_8\\.b[2]': true,
      
      // Item 9 - Source of Information
      'GC-312[0].Page4[0].Item9[0].Item9a[0].PersKnow9a_cb[0]': true,
      'GC-312[0].Page4[0].Item9[0].Item9b[0].PersKnow9b_cb[0]': true,
      'GC-312[0].Page4[0].Item9[0].Item9c[0].PersKnow9c_cb[0]': true,
      'GC-312[0].Page4[0].Item9[0].Item9d[0].PersKnow9d_cb[0]': true,
    };

    // Set all checkboxes
    for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
      try {
        const checkbox = form.getCheckBox(fieldName);
        if (shouldCheck) {
          checkbox.check();
        } else {
          checkbox.uncheck();
        }
        console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
      } catch (e) {
        console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
      }
    }

    return await pdfDoc.save();
  } catch (error) {
    console.error('Error filling GC-312:', error);
    throw error;
  }
}

// GC-320 Form Filler Function (Citation for Conservatorship)
async function fillGC320(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-320 has ${form.getFields().length} fields available`);
    
    // Attorney Information
    const attorneyFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyName_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyBarNo_dc[0]': data.attorney.bar_number,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyFirm_ft[0]': data.attorney.firm_name,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyStreet_ft[0]': data.attorney.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyCity_ft[0]': data.attorney.city,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyState_ft[0]': data.attorney.state,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyZip_ft[0]': data.attorney.zip,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Phone_ft[0]': data.attorney.phone,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Fax_ft[0]': data.attorney.fax,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].Email_ft[0]': data.attorney.email,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].AttyInfo[0].AttyFor_ft[0]': `Petitioner ${data.petitioner.name}`,
    };
    
    // Court Information
    const courtFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].CrtCounty_ft[0]': data.court.county,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].Street_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].MailingAdd_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].CityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CourtInfo[0].Branch_ft[0]': data.court.branch,
    };
    
    // Case Information (appears on all 3 pages)
    const caseFields = {
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || 'To be assigned',
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].TitlePartyName[0].Party1_ft[0]': data.conservatee.name,
      'topmostSubform[0].Page2[0].PxCaption_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || 'To be assigned',
      'topmostSubform[0].Page2[0].PxCaption_sf[0].TitlePartyName[0].Party1_ft[0]': data.conservatee.name,
      'topmostSubform[0].Page3[0].PxCaption_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || 'To be assigned',
      'topmostSubform[0].Page3[0].PxCaption_sf[0].TitlePartyName[0].Party1_ft[0]': data.conservatee.name,
    };
    
    // Citation Information (Page 1)
    const citationFields = {
      'topmostSubform[0].Page1[0].FillText59[0]': data.conservatee.name,
      'topmostSubform[0].Page1[0].FillText64[0]': data.conservatee.address || '',
      'topmostSubform[0].Page1[0].FillText65[0]': data.petitioner.name,
    };
    
    // Hearing Information
    const hearingFields = {
      'topmostSubform[0].Page1[0].#area[0].FillText61[0]': data.hearing.date,
      'topmostSubform[0].Page1[0].#area[0].FillText60[0]': data.hearing.time,
      'topmostSubform[0].Page1[0].#area[0].FillText59[1]': data.hearing.dept,
      'topmostSubform[0].Page1[0].#area[0].FillText58[0]': data.hearing.room || '',
    };
    
    // Clerk Signature (Page 2)
    const clerkFields = {
      'topmostSubform[0].Page2[0].FillText66[0]': formatDate(new Date()),
      'topmostSubform[0].Page2[0].T56[0]': 'Deputy',
    };
    
    // Service Information (Page 3)
    const serviceFields = {
      'topmostSubform[0].Page3[0].FillText4[0]': data.conservatee.name,
      'topmostSubform[0].Page3[0].FillText22[0]': data.conservatee.address,
      'topmostSubform[0].Page3[0].FillText11[0]': '',
      'topmostSubform[0].Page3[0].FillText190[0]': '',
      'topmostSubform[0].Page3[0].FillText19[0]': '',
    };
    
    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtFields,
      ...caseFields,
      ...citationFields,
      ...hearingFields,
      ...clerkFields,
      ...serviceFields
    };
    
    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }
    
    // CHECKBOXES
    const checkboxes = {
      // Type of Conservatorship (header and repeated on all pages)
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].TitlePartyName[0].#area[0].TitlePerson_cb[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].TitlePartyName[0].#area[0].TitleEstate_cb[0]': data.conservatorship_type === 'estate',
      'topmostSubform[0].Page1[0].CaptionP1_sf[0].FormTitle[0].#area[0].ChckBx22[0]': data.is_limited || false,
      'topmostSubform[0].Page2[0].PxCaption_sf[0].TitlePartyName[0].#area[0].TitlePerson_cb[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page2[0].PxCaption_sf[0].TitlePartyName[0].#area[0].TitleEstate_cb[0]': data.conservatorship_type === 'estate',
      'topmostSubform[0].Page3[0].PxCaption_sf[0].TitlePartyName[0].#area[0].TitlePerson_cb[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page3[0].PxCaption_sf[0].TitlePartyName[0].#area[0].TitleEstate_cb[0]': data.conservatorship_type === 'estate',
      
      // Reasons for conservatorship
      'topmostSubform[0].Page1[0].CheckBox8[0]': data.conservatee.unable_provide_needs !== false,
      'topmostSubform[0].Page1[0].ChckBox8[0]': data.conservatee.unable_manage_finances !== false,
      
      // Type of conservator
      'topmostSubform[0].Page1[0].CheckBox5[0]': !data.is_limited,
      'topmostSubform[0].Page1[0].ChckBox5[0]': data.is_limited,
      
      // Conservatorship of
      'topmostSubform[0].Page1[0].CheckBx3[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page1[0].ChckBox3[0]': data.conservatorship_type === 'estate',
      'topmostSubform[0].Page1[0].CheckBox2[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page1[0].CheckBx2[0]': data.conservatorship_type === 'estate',
      
      // Address same as above
      'topmostSubform[0].Page1[0].CheckBox9[0]': true,
      'topmostSubform[0].Page1[0].CheckBox10[0]': false,
      
      // Hearing location
      'topmostSubform[0].Page1[0].#area[0].CheckBox27[0]': true,
      'topmostSubform[0].Page1[0].#area[0].CheckBox28[0]': data.hearing.room ? true : false,
      
      // Service section (Page 3)
      'topmostSubform[0].Page3[0].CheckBox29[0]': true,
      'topmostSubform[0].Page3[0].CheckBox27[0]': false,
      'topmostSubform[0].Page3[0].CheckBox26[0]': false,
    };
    
    // Set all checkboxes
    for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
      try {
        const checkbox = form.getCheckBox(fieldName);
        if (shouldCheck) {
          checkbox.check();
        } else {
          checkbox.uncheck();
        }
        console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
      } catch (e) {
        console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
      }
    }
    
    return await pdfDoc.save();
  } catch (error) {
    console.error('Error filling GC-320:', error);
    throw error;
  }
}

// GC-340 Form Filler Function (Order Appointing Conservator)
async function fillGC340(data, pdfBytes) {
  try {
    const pdfDoc = await PDFDocument.load(pdfBytes);
    const form = pdfDoc.getForm();
    
    console.log(`GC-340 has ${form.getFields().length} fields available`);
    
    // Attorney Information
    const attorneyFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyName_ft[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyBarNo_dc[0]': data.attorney.bar_number,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFirm_ft[0]': data.attorney.firm_name,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyStreet_ft[0]': data.attorney.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyCity_ft[0]': data.attorney.city,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyState_ft[0]': data.attorney.state,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyZip_ft[0]': data.attorney.zip,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Phone_ft[0]': data.attorney.phone,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Fax_ft[0]': data.attorney.fax,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].Email_ft[0]': data.attorney.email,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].AttyInfo[0].AttyFor_ft[0]': `Petitioner ${data.petitioner.name}`,
    };
    
    // Court Information
    const courtFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CrtCounty_ft[0]': data.court.county,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Street_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].MailingAdd_ft[0]': data.court.street,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].CityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CourtInfo[0].Branch_ft[0]': data.court.branch,
    };
    
    // Case Information (appears on all pages)
    const caseFields = {
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].TitlePartyName[0].Party2_ft[0]': data.conservatee.name,
      'topmostSubform[0].Page2[0].CaptionPx_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page2[0].CaptionPx_sf[0].TitlePartyName[0].Party2_ft[0]': data.conservatee.name,
      'topmostSubform[0].Page3[0].CaptionPx_sf[0].CaseNumber[0].CaseNumber_ft[0]': data.case_number || '',
      'topmostSubform[0].Page3[0].CaptionPx_sf[0].TitlePartyName[0].Party2_ft[0]': data.conservatee.name,
    };
    
    // Hearing Information (Page 1)
    const hearingFields = {
      'topmostSubform[0].Page1[0].FillText16[0]': data.hearing.judge || '',
      'topmostSubform[0].Page1[0].FillText17[0]': data.hearing.date,
      'topmostSubform[0].Page1[0].FillText18[0]': data.hearing.time,
      'topmostSubform[0].Page1[0].FillText19[0]': data.hearing.dept,
      'topmostSubform[0].Page1[0].FillText20[0]': data.hearing.room || '',
    };
    
    // Appearances (Page 1)
    const appearanceFields = {
      'topmostSubform[0].Page1[0].FillText21[0]': data.petitioner.name,
      'topmostSubform[0].Page1[0].FillText22[0]': data.attorney.name,
      'topmostSubform[0].Page1[0].FillText23[0]': data.conservatee.attorney_name || '',
    };
    
    // Conservatee Information (Page 1)
    const conservateeFields = {
      'topmostSubform[0].Page1[0].FillText24[0]': data.conservatee.phone || '',
      'topmostSubform[0].Page1[0].FillText25[0]': data.conservatee.address,
      'topmostSubform[0].Page1[0].FillText26[0]': data.conservatee.name,
    };
    
    // Conservator Appointment (Page 2)
    const appointmentFields = {
      'topmostSubform[0].Page2[0].FillText35[0]': data.conservator.name || data.petitioner.name,
      'topmostSubform[0].Page2[0].FillText36[0]': data.conservator.phone || data.petitioner.phone,
      'topmostSubform[0].Page2[0].FillText37[0]': data.conservator.address || data.petitioner.address,
      'topmostSubform[0].Page2[0].FillText38[0]': data.conservatee.name,
      'topmostSubform[0].Page2[0].FillText39[0]': data.conservator.name || data.petitioner.name,
      'topmostSubform[0].Page2[0].FillText40[0]': data.conservator.address || data.petitioner.address,
      'topmostSubform[0].Page2[0].FillText41[0]': data.conservator.phone || data.petitioner.phone,
    };
    
    // Bond Information (Page 2)
    const bondFields = {
      'topmostSubform[0].Page2[0].FillText43[0]': data.bond.amount || '',
      'topmostSubform[0].Page2[0].FillText44[0]': data.bond.blocked_amount || '',
      'topmostSubform[0].Page2[0].FillText45[0]': data.bond.institution || '',
    };
    
    // Professional Fiduciary Info
    const fiduciaryFields = {
      'topmostSubform[0].Page2[0].FillText32[0]': data.conservator.license_number || '',
      'topmostSubform[0].Page2[0].FillText33[0]': data.conservator.license_issue_date || '',
      'topmostSubform[0].Page2[0].FillText34[0]': data.conservator.license_expiry_date || '',
    };
    
    // Legal Fees (Page 3)
    const feeFields = {
      'topmostSubform[0].Page3[0].FillText46[0]': data.fees.amount || '',
      'topmostSubform[0].Page3[0].FillText47[0]': data.attorney.name,
    };
    
    // Judge Signature (Page 3)
    const signatureFields = {
      'topmostSubform[0].Page3[0].FillText53[0]': formatDate(new Date()),
    };
    
    // Combine all text fields
    const allTextFields = {
      ...attorneyFields,
      ...courtFields,
      ...caseFields,
      ...hearingFields,
      ...appearanceFields,
      ...conservateeFields,
      ...appointmentFields,
      ...bondFields,
      ...fiduciaryFields,
      ...feeFields,
      ...signatureFields
    };
    
    // Fill all text fields
    for (const [fieldName, value] of Object.entries(allTextFields)) {
      try {
        const field = form.getTextField(fieldName);
        field.setText(value || '');
        console.log(`Set ${fieldName} to "${value}"`);
      } catch (e) {
        console.log(`Could not set field ${fieldName}: ${e.message}`);
      }
    }
    
    // CHECKBOXES
    const checkboxes = {
      // Type of Conservatorship (header)
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBox22[0]': data.conservatorship_type === 'person',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBx22[0]': data.conservatorship_type === 'estate',
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].ChckBx22[0]': data.is_limited || false,
      'topmostSubform[0].Page1[0].StdP1Header_sf[0].FormTitle[0].CheckBox23[0]': data.is_successor || false,
      
      // Appearances (Page 1)
      'topmostSubform[0].Page1[0].CheckBox08[0]': true,
      'topmostSubform[0].Page1[0].CheckBox09[0]': true,
      'topmostSubform[0].Page1[0].CheckBox14[3]': true,
      'topmostSubform[0].Page1[0].CheckBox16[0]': true,
      
      // Findings (Page 1)
      'topmostSubform[0].Page1[0].CheckBox17[0]': data.conservatee.unable_provide_needs !== false,
      'topmostSubform[0].Page1[0].CheckBox18[0]': data.conservatee.unable_manage_finances !== false,
      'topmostSubform[0].Page1[0].CheckBox20[0]': true,
      
      // Medical consent powers
      'topmostSubform[0].Page1[0].CheckBox21[0]': data.powers.medicalDecisions || false,
      
      // Appointment type (Page 2)
      'topmostSubform[0].Page2[0].CheckBox41[0]': !data.is_limited,
      'topmostSubform[0].Page2[0].CheckBox41[1]': data.is_limited,
      'topmostSubform[0].Page2[0].OrderEstAppt[0]': !data.is_limited,
'topmostSubform[0].Page2[0].OrderEstAppt[0]': !data.is_limited && data.conservatorship_type === 'estate',
     'topmostSubform[0].Page2[0].OrderEstAppt[1]': data.is_limited && data.conservatorship_type === 'estate',
     
     // Bond (Page 2)
     'topmostSubform[0].Page2[0].CheckBox44[0]': !data.bond.required,
     'topmostSubform[0].Page2[0].CheckBox45[0]': data.bond.required,
     'topmostSubform[0].Page2[0].CheckBox46[0]': data.bond.blocked_amount ? true : false,
     
     // Legal fees (Page 3)
     'topmostSubform[0].Page3[0].CheckBox50[0]': data.fees.amount ? true : false,
     'topmostSubform[0].Page3[0].CheckBox51[1]': true,
     'topmostSubform[0].Page3[0].CheckBox52[0]': true,
     
     // Voting rights
     'topmostSubform[0].Page3[0].CheckBox54[0]': data.conservatee.disqualified_voting || false,
     
     // Medical treatment authority
     'topmostSubform[0].Page3[0].CheckBox55[0]': data.powers.medicalDecisions || false,
     
     // Order effective date
     'topmostSubform[0].Page3[0].CheckBox85[0]': true,
     'topmostSubform[0].Page3[0].CheckBox86[0]': true,
   };
   
   // Set all checkboxes
   for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
     try {
       const checkbox = form.getCheckBox(fieldName);
       if (shouldCheck) {
         checkbox.check();
       } else {
         checkbox.uncheck();
       }
       console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
     } catch (e) {
       console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
     }
   }
   
   return await pdfDoc.save();
 } catch (error) {
   console.error('Error filling GC-340:', error);
   throw error;
 }
}

// GC-350 Form Filler Function (Letters of Conservatorship)
async function fillGC350(data, pdfBytes) {
 try {
   const pdfDoc = await PDFDocument.load(pdfBytes);
   const form = pdfDoc.getForm();
   
   console.log(`GC-350 has ${form.getFields().length} fields available`);
   
   // Attorney Information
   const attorneyFields = {
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Add1_ft[0]': data.attorney.name,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Add2_ft[0]': data.attorney.firm_name,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Add3_ft[0]': data.attorney.street,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Add4_ft[0]': `${data.attorney.city}, ${data.attorney.state} ${data.attorney.zip}`,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Tel_ft[0]': data.attorney.phone,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Tel_ft[1]': data.attorney.email,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Tel_ft[2]': data.attorney.fax,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].AttyPartyInfo_sf[0].Tel_ft[3]': `Petitioner ${data.petitioner.name}`,
   };
   
   // Court Information
   const courtFields = {
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CrtInfo_sf[0].Crtname_ft[0]': data.court.county,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CrtInfo_sf[0].CrtStreetAdd_ft[0]': data.court.street,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CrtInfo_sf[0].CrtMail_ft[0]': data.court.street,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CrtInfo_sf[0].CrtCityZip_ft[0]': `${data.court.city}, CA ${data.court.zip}`,
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CrtInfo_sf[0].CrtBranch[0]': data.court.branch,
   };
   
   // Case Information
   const caseFields = {
     'topmostSubform[0].Page1[0].EJHeader_sf[0].CaseNumber_sf_sf[0].CaseNumber_ft[0]': data.caseNumber || '',
     'topmostSubform[0].Page1[0].EJHeader_sf[0].Party_sf[0].Party_ft[0]': data.conservatee.name,
     'topmostSubform[0].Page2[0].Party_sf[0].Party_ft[0]': data.conservatee.name,
     'topmostSubform[0].Page2[0].CaseNumber_sf_sf[0].CaseNumber_ft[0]': data.caseNumber || '',
   };
   
   // Appointment Information (Page 1)
   const appointmentFields = {
     'topmostSubform[0].Page1[0].FillText75[0]': data.conservator.name || data.petitioner.name,
     'topmostSubform[0].Page1[0].FillText79[0]': data.conservatee.name,
     'topmostSubform[0].Page1[0].FillText83[0]': data.conservator.name || data.petitioner.name,
     'topmostSubform[0].Page1[0].FillText87400[0]': data.conservatee.name,
     'topmostSubform[0].Page1[0].FillText87[0]': '',
   };
   
   // Authority/Powers fields
   const authorityFields = {
     'topmostSubform[0].Page1[0].FillTxt87400[0]': '',
     'topmostSubform[0].Page1[0].FillText6[0]': data.attachments?.numberOfPages || '0',
   };
   
   // Clerk/Court Certification (Page 1)
   const certificationFields = {
     'topmostSubform[0].Page1[0].FillText181[0]': formatDate(new Date()),
   };
   
   // Affirmation/Oath (Page 2)
   const oathFields = {
     'topmostSubform[0].Page2[0].FillText31[0]': formatDate(new Date()),
     'topmostSubform[0].Page2[0].FillText35[0]': `${data.court.city || 'Los Angeles'}, California`,
     'topmostSubform[0].Page2[0].FillText43[0]': data.conservator.name || data.petitioner.name,
     'topmostSubform[0].Page2[0].FillText39[0]': formatDate(new Date()),
   };
   
   // Combine all text fields
   const allTextFields = {
     ...attorneyFields,
     ...courtFields,
     ...caseFields,
     ...appointmentFields,
     ...authorityFields,
     ...certificationFields,
     ...oathFields
   };
   
   // Fill all text fields
   for (const [fieldName, value] of Object.entries(allTextFields)) {
     try {
       const field = form.getTextField(fieldName);
       field.setText(value || '');
       console.log(`Set ${fieldName} to "${value}"`);
     } catch (e) {
       console.log(`Could not set field ${fieldName}: ${e.message}`);
     }
   }
   
   // CHECKBOXES
   const checkboxes = {
     // Type of Conservatorship (header)
     'topmostSubform[0].Page1[0].EJHeader_sf[0].Title_sf[0].Person[0]': data.conservatorship_type === 'person',
     'topmostSubform[0].Page1[0].EJHeader_sf[0].Title_sf[0].Estate[0]': data.conservatorship_type === 'estate',
     'topmostSubform[0].Page1[0].EJHeader_sf[0].Title_sf[0].LimitedConsShip[0]': data.is_limited || false,
     
     // Conservator type
     'topmostSubform[0].Page1[0].CheckBox29[0]': !data.is_limited,
     'topmostSubform[0].Page1[0].CheckBox30[0]': data.is_limited,
     
     // Conservatorship of
     'topmostSubform[0].Page1[0].CheckBox31[0]': data.conservatorship_type === 'person',
     'topmostSubform[0].Page1[0].CheckBx31[0]': data.conservatorship_type === 'estate',
     'topmostSubform[0].Page1[0].CheckBox36[0]': data.conservatorship_type === 'person',
     'topmostSubform[0].Page1[0].CheckBx36[0]': data.conservatorship_type === 'estate',
     'topmostSubform[0].Page1[0].CheckBox40[0]': data.conservatorship_type === 'person',
     'topmostSubform[0].Page1[0].CheckBx40[0]': data.conservatorship_type === 'estate',
     
     // Medical consent authority
     'topmostSubform[0].Page1[0].CheckBox217[0]': data.powers?.medicalDecisions || false,
     'topmostSubform[0].Page1[0].CheckBox218[0]': false,
     'topmostSubform[0].Page1[0].CheckBox16[0]': false,
     
     // Placement authority
     'topmostSubform[0].Page1[0].CheckBox17[0]': data.powers?.dementiaPowersPlacement || false,
     'topmostSubform[0].Page1[0].CheckBox1001[0]': data.powers?.dementiaPowersMedical || false,
     
     // Powers and conditions
     'topmostSubform[0].Page1[0].CheckBox2171[0]': data.powers?.independentPowers || false,
     'topmostSubform[0].Page1[0].CheckBox1702[0]': !data.powers?.notAuthorizedProperty || false,
     
     // Other authority/conditions
     'topmostSubform[0].Page1[0].CheckBox1[0]': data.powers?.otherPowersGranted || false,
     'topmostSubform[0].Page1[0].CheckBox2181[0]': data.powers?.propertyConditions || false,
     'topmostSubform[0].Page1[0].CheckBox1601[0]': data.powers?.careConditions || false,
     'topmostSubform[0].Page1[0].CheckBox1701[0]': data.is_limited,
     'topmostSubform[0].Page1[0].CheckBox2182[0]': data.is_limited,
     'topmostSubform[0].Page1[0].CheckBox1602[0]': data.powers?.otherConditionsGranted || false,
     
     // Appointment certification
     'topmostSubform[0].Page1[0].#area[0].CheckBox61[0]': true,
     
     // Affirmation (Page 2)
     'topmostSubform[0].Page2[0].CheckBox2184[0]': !data.is_limited,
     'topmostSubform[0].Page2[0].CheckBx2184[0]': data.is_limited,
   };
   
   // Set all checkboxes
   for (const [fieldName, shouldCheck] of Object.entries(checkboxes)) {
     try {
       const checkbox = form.getCheckBox(fieldName);
       if (shouldCheck) {
         checkbox.check();
       } else {
         checkbox.uncheck();
       }
       console.log(`${shouldCheck ? 'Checked' : 'Unchecked'} ${fieldName}`);
     } catch (e) {
       console.log(`Could not set checkbox ${fieldName}: ${e.message}`);
     }
   }
   
   return await pdfDoc.save();
 } catch (error) {
   console.error('Error filling GC-350:', error);
   throw error;
 }
}

// Main function to fill all conservatorship forms
async function fillConservatorshipForms(data) {
 const results = {};
 
 const forms = [
   { name: 'GC-310', filename: 'GC-310-unlocked.pdf', filler: fillGC310, condition: data.forms?.gc310 !== false },
   { name: 'GC-312', filename: 'GC-312-unlocked.pdf', filler: fillGC312, condition: data.forms?.gc312 !== false },
   { name: 'GC-320', filename: 'GC-320-unlocked.pdf', filler: fillGC320, condition: data.forms?.gc320 || data.is_temporary },
   { name: 'GC-340', filename: 'GC-340-unlocked.pdf', filler: fillGC340, condition: data.forms?.gc340 || data.orderApproved },
   { name: 'GC-350', filename: 'GC-350-unlocked.pdf', filler: fillGC350, condition: data.forms?.gc350 || data.orderApproved },
 ];
 
 for (const { name, filename, filler, condition } of forms) {
   if (condition) {
     try {
       console.log(`Processing ${name}...`);
       const pdfBytes = await loadPDFFromRepo(filename);
       results[name] = await filler(data, pdfBytes);
       console.log(`${name} completed`);
     } catch (error) {
       console.error(`Error with ${name}:`, error);
       results[name] = Buffer.from(`Error processing ${name}`);
     }
   }
 }
 
 return results;
}

// Merge multiple PDFs into one
async function mergePDFs(pdfs) {
 try {
   const mergedDoc = await PDFDocument.create();
   
   for (const [formName, pdfBytes] of Object.entries(pdfs)) {
     if (pdfBytes && pdfBytes.length > 100) {
       console.log(`Merging ${formName}...`);
       const doc = await PDFDocument.load(pdfBytes);
       const pages = await mergedDoc.copyPages(doc, doc.getPageIndices());
       pages.forEach((page) => mergedDoc.addPage(page));
     }
   }
   
   return await mergedDoc.save();
 } catch (error) {
   console.error('Error merging PDFs:', error);
   throw error;
 }
}

// Netlify Function Handler
exports.handler = async (event, context) => {
 if (event.httpMethod === 'OPTIONS') {
   return {
     statusCode: 200,
     headers: {
       'Access-Control-Allow-Origin': '*',
       'Access-Control-Allow-Headers': 'Content-Type',
       'Access-Control-Allow-Methods': 'POST, OPTIONS',
     },
     body: '',
   };
 }
 
 if (event.httpMethod !== 'POST') {
   return {
     statusCode: 405,
     headers: {
       'Content-Type': 'application/json',
       'Access-Control-Allow-Origin': '*',
     },
     body: JSON.stringify({ error: 'Method not allowed' }),
   };
 }
 
 try {
   const webhookData = JSON.parse(event.body);
   
   console.log('Received conservatorship form submission for conservatee:', webhookData.conservatee_name || 'Unknown');
   
   const transformedData = transformConservatorshipData(webhookData);
   
   console.log('Data transformed, filling PDFs...');
   console.log('Conservatorship type:', transformedData.conservatorship_type);
   console.log('Is limited:', transformedData.is_limited);
   console.log('Is temporary:', transformedData.is_temporary);
   console.log('Forms to generate:', transformedData.forms);
   
   const pdfs = await fillConservatorshipForms(transformedData);
   
   const successfulForms = Object.keys(pdfs).filter(key => pdfs[key].length > 100);
   console.log(`Successfully generated ${successfulForms.length} forms:`, successfulForms);
   
   // Option 1: Return individual PDFs
   if (webhookData.return_individual_pdfs === true) {
     const response = {
       success: true,
       message: `Generated ${successfulForms.length} conservatorship forms successfully`,
       timestamp: new Date().toISOString(),
       metadata: {
         conservatee: transformedData.conservatee.name,
         conservator: transformedData.conservator.name,
         petitioner: transformedData.petitioner.name,
         conservatorship_type: transformedData.conservatorship_type,
         is_limited: transformedData.is_limited,
         is_temporary: transformedData.is_temporary,
         estate_value: transformedData.estate.total,
         case_number: transformedData.case_number || 'To be assigned',
         forms_generated: successfulForms
       },
       pdfs: {}
     };
     
     for (const formName of successfulForms) {
       response.pdfs[formName] = Buffer.from(pdfs[formName]).toString('base64');
     }
     
     return {
       statusCode: 200,
       headers: {
         'Content-Type': 'application/json',
         'Access-Control-Allow-Origin': '*',
       },
       body: JSON.stringify(response),
     };
   }
   
   // Option 2: Return merged PDF (default)
   console.log('Merging all forms into single PDF...');
   const mergedPDF = await mergePDFs(pdfs);
   
   const conservateeName = (transformedData.conservatee.name || 'Unknown').replace(/[^a-zA-Z0-9]/g, '_');
   const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
   const filename = `Conservatorship_${conservateeName}_${timestamp}.pdf`;
   
   const response = {
     success: true,
     message: `Generated ${successfulForms.length} conservatorship forms successfully`,
     timestamp: new Date().toISOString(),
     filename: filename,
     metadata: {
       conservatee: transformedData.conservatee.name,
       conservator: transformedData.conservator.name,
       petitioner: transformedData.petitioner.name,
       conservatorship_type: transformedData.conservatorship_type,
       is_limited: transformedData.is_limited,
       is_temporary: transformedData.is_temporary,
       estate_value: transformedData.estate.total,
       case_number: transformedData.case_number || 'To be assigned',
       forms_generated: successfulForms
     },
     pdf: Buffer.from(mergedPDF).toString('base64')
   };
   
   return {
     statusCode: 200,
     headers: {
       'Content-Type': 'application/json',
       'Access-Control-Allow-Origin': '*',
     },
     body: JSON.stringify(response),
   };
   
 } catch (error) {
   console.error('Error processing conservatorship forms:', error);
   return {
     statusCode: 500,
     headers: {
       'Content-Type': 'application/json',
       'Access-Control-Allow-Origin': '*',
     },
     body: JSON.stringify({ 
       error: 'Failed to process conservatorship forms',
       details: error.message,
       stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
     }),
   };
 }
};
